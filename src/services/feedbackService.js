// src/services/feedbackService.js
const moment = require('moment-timezone');
const { Markup } = require('telegraf');

class FeedbackService {
  constructor(supabase, bot = null) {
    this.supabase = supabase;
    this.bot = bot;
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async saveFeedback(telegram_id, type, message) {
    try {
      const { data, error } = await this.supabase
        .from('feedback')
        .insert({
          user_id: telegram_id,
          type: type,
          message: message,
          status: 'new'
        })
        .select()
        .single();

      if (error) {
        console.error('Error saving feedback:', error);
        throw error;
      }

      console.log(`‚úÖ Feedback saved: ${type} from user ${telegram_id}`);
      return data;
    } catch (error) {
      console.error('Error in saveFeedback:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  async getAllFeedback(filters = {}) {
    try {
      let query = this.supabase
        .from('feedback')
        .select('*')
        .order('created_at', { ascending: false });

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
      if (filters.type) {
        query = query.eq('type', filters.type);
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (filters.status) {
        query = query.eq('status', filters.status);
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (filters.user_id) {
        query = query.eq('user_id', filters.user_id);
      }

      // –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
      if (filters.limit) {
        query = query.limit(filters.limit);
      }

      const { data, error } = await query;

      if (error) {
        console.error('Error getting feedback:', error);
        throw error;
      }

      return data || [];
    } catch (error) {
      console.error('Error in getAllFeedback:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserFeedback(telegram_id) {
    try {
      const { data, error } = await this.supabase
        .from('feedback')
        .select('*')
        .eq('user_id', telegram_id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error getting user feedback:', error);
        throw error;
      }

      return data || [];
    } catch (error) {
      console.error('Error in getUserFeedback:', error);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞
  async updateFeedbackStatus(id, status) {
    try {
      const { data, error } = await this.supabase
        .from('feedback')
        .update({ status: status })
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('Error updating feedback status:', error);
        throw error;
      }

      console.log(`‚úÖ Feedback ${id} status updated to ${status}`);
      return data;
    } catch (error) {
      console.error('Error in updateFeedbackStatus:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤
  async getFeedbackStats() {
    try {
      const { data, error } = await this.supabase
        .from('feedback')
        .select('type, status');

      if (error) {
        console.error('Error getting feedback stats:', error);
        throw error;
      }

      const stats = {
        total: data.length,
        bugs: data.filter(f => f.type === 'bug').length,
        suggestions: data.filter(f => f.type === 'suggestion').length,
        new: data.filter(f => f.status === 'new').length,
        in_progress: data.filter(f => f.status === 'in_progress').length,
        resolved: data.filter(f => f.status === 'resolved').length,
        closed: data.filter(f => f.status === 'closed').length
      };

      return stats;
    } catch (error) {
      console.error('Error in getFeedbackStats:', error);
      throw error;
    }
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
  async notifyAdmin(feedbackData, userData) {
    if (!this.bot) {
      console.log('‚ö†Ô∏è Bot not initialized, skipping admin notification');
      return;
    }

    const adminId = process.env.ADMIN_TELEGRAM_ID;
    const channelId = process.env.FEEDBACK_CHANNEL_ID;

    if (!adminId && !channelId) {
      console.log('‚ö†Ô∏è No admin ID or channel ID configured');
      return;
    }

    try {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const username = userData?.username ? '@' + userData.username : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const telegramId = userData?.telegram_id || 'N/A';
      const userLevel = userData?.level || 'N/A';

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const typeEmoji = feedbackData.type === 'bug' ? 'üêõ' : 'üí°';
      const typeText = feedbackData.type === 'bug' ? '–ù–û–í–ê–Ø –û–®–ò–ë–ö–ê' : '–ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï';

      const message = `${typeEmoji} *${typeText}*

üì± –û—Ç: ${username} (${telegramId})
üìÖ –î–µ–Ω—å: ${userLevel}
üÜî Feedback ID: #${feedbackData.id}

üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:*
${feedbackData.message}

‚è∞ ${moment().tz('Europe/Moscow').format('DD.MM.YYYY HH:mm')}`;

      // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ', `admin_feedback_accept_${feedbackData.id}`),
          Markup.button.callback('üîß –í —Ä–∞–±–æ—Ç–µ', `admin_feedback_progress_${feedbackData.id}`)
        ],
        [
          Markup.button.callback('üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', `admin_feedback_reply_${feedbackData.id}_${telegramId}`),
          Markup.button.callback('‚úîÔ∏è –†–µ—à–µ–Ω–æ', `admin_feedback_resolve_${feedbackData.id}`)
        ]
      ]);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
      if (adminId) {
        await this.bot.telegram.sendMessage(adminId, message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        });
        console.log(`‚úÖ Admin notified about feedback #${feedbackData.id}`);
      }

      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
      if (channelId) {
        await this.bot.telegram.sendMessage(channelId, message, {
          parse_mode: 'Markdown'
        });
        console.log(`‚úÖ Channel notified about feedback #${feedbackData.id}`);
      }

    } catch (error) {
      console.error('‚ùå Error notifying admin:', error);
      console.error('Error stack:', error.stack);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    }
  }
}

module.exports = { FeedbackService };

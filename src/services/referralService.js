// src/services/referralService.js
const moment = require('moment-timezone');
const crypto = require('crypto');

class ReferralService {
  constructor(supabase, bot) {
    this.supabase = supabase;
    this.bot = bot;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
  generateReferralLink(userId) {
    const referralCode = this.generateReferralCode(userId);
    return `https://t.me/${process.env.BOT_USERNAME}?start=ref_${referralCode}`;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  generateReferralCode(userId) {
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ userId –∏–ª–∏ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
    return crypto.createHash('md5')
      .update(`${userId}-${process.env.REFERRAL_SALT}`)
      .digest('hex')
      .substring(0, 8);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async processReferral(newUserId, referralCode) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
      const { data: referrer, error: findError } = await this.supabase
        .from('users')
        .select('id, telegram_id, referral_code')
        .eq('referral_code', referralCode)
        .single();

      if (!referrer || findError) {
        console.log('Invalid referral code:', referralCode);
        return null;
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ
      const { data: referral, error: createError } = await this.supabase
        .from('referrals')
        .insert([{
          referrer_id: referrer.id,
          referred_id: newUserId,
          status: 'pending', // pending, active, rewarded
          created_at: new Date().toISOString()
        }])
        .select()
        .single();

      if (createError) {
        console.error('Error creating referral:', createError);
        return null;
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –¥—Ä—É–≥–µ
      await this.notifyReferrer(referrer.telegram_id, newUserId);

      return referral;
    } catch (error) {
      console.error('Error processing referral:', error);
      return null;
    }
  }

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–ø–æ—Å–ª–µ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
  async activateReferral(userId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 7 –¥–Ω–µ–π
      const { data: stats } = await this.supabase
        .from('daily_stats')
        .select('date')
        .eq('user_id', userId)
        .gte('completed_tasks', 10) // –ú–∏–Ω–∏–º—É–º 10 –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å
        .order('date', { ascending: false })
        .limit(7);

      if (!stats || stats.length < 7) {
        return false; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω–µ–π
      const dates = stats.map(s => moment(s.date));
      const daysDiff = dates[0].diff(dates[6], 'days');
      
      if (daysDiff > 10) {
        return false; // –î–Ω–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã
      }

      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
      const { data: referral } = await this.supabase
        .from('referrals')
        .select('*')
        .eq('referred_id', userId)
        .eq('status', 'pending')
        .single();

      if (!referral) {
        return false;
      }

      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª
      await this.supabase
        .from('referrals')
        .update({
          status: 'active',
          activated_at: new Date().toISOString()
        })
        .eq('id', referral.id);

      // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.rewardUsers(referral.referrer_id, userId);

      return true;
    } catch (error) {
      console.error('Error activating referral:', error);
      return false;
    }
  }

  // –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async rewardUsers(referrerId, referredId) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.sendRewardNotifications(referrerId, referredId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      await this.checkReferralAchievements(referrerId);

      return true;
    } catch (error) {
      console.error('Error rewarding users:', error);
      return false;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Pro
  async upgradeUserToPro(userId, endDate) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
      const { data: user } = await this.supabase
        .from('users')
        .select('subscription_type, subscription_end')
        .eq('id', userId)
        .single();

      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å Pro, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º
      if (user.subscription_type === 'pro' && user.subscription_end) {
        const currentEnd = moment(user.subscription_end);
        const newEnd = currentEnd.isAfter(moment()) 
          ? currentEnd.add(30, 'days')
          : moment().add(30, 'days');
        
        endDate = newEnd.format('YYYY-MM-DD');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      await this.supabase
        .from('users')
        .update({
          subscription_type: 'pro',
          subscription_end: endDate,
          updated_at: new Date().toISOString()
        })
        .eq('id', userId);

      return true;
    } catch (error) {
      console.error('Error upgrading user:', error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  async checkReferralAchievements(userId) {
    try {
      // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const { data: referrals, count } = await this.supabase
        .from('referrals')
        .select('*', { count: 'exact' })
        .eq('referrer_id', userId)
        .in('status', ['active', 'rewarded']);

      const activeCount = count || 0;

      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const achievements = [];
      if (activeCount >= 1) achievements.push('referral_1');
      if (activeCount >= 3) achievements.push('referral_3');
      if (activeCount >= 5) achievements.push('referral_5');
      if (activeCount >= 10) achievements.push('referral_10');

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–ª—è —Å—É–ø–µ—Ä—Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      if (activeCount >= 5) {
        // –î–∞–µ–º —Å—Ç–∞—Ç—É—Å Founding Member
        await this.grantFoundingMember(userId);
        achievements.push('founding_member');
      }

      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      for (const code of achievements) {
        await this.unlockAchievement(userId, code);
      }

      return achievements;
    } catch (error) {
      console.error('Error checking achievements:', error);
      return [];
    }
  }

  // Founding Member –¥–ª—è —Å—É–ø–µ—Ä—Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
  async grantFoundingMember(userId) {
    try {
      await this.supabase
        .from('users')
        .update({
          is_founding_member: true
        })
        .eq('id', userId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–æ–±–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const { data: user } = await this.supabase
        .from('users')
        .select('telegram_id')
        .eq('id', userId)
        .single();

      if (user) {
        await this.bot.telegram.sendMessage(
          user.telegram_id,
          `üéâ *–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!*\n\n` +
          `–¢—ã —Å—Ç–∞–ª *Founding Member* FlowBot!\n\n` +
          `üëë –û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ\n` +
          `üèÜ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n` +
          `üíé –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n` +
          `‚ù§Ô∏è –ù–∞—à–∞ –≤–µ—á–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å\n\n` +
          `–¢—ã –ø–æ–º–æ–≥ ${5}+ –ª—é–¥—è–º —Å—Ç–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ!\n` +
          `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å FlowBot!`,
          { parse_mode: 'Markdown' }
        );
      }
    } catch (error) {
      console.error('Error granting Founding Member:', error);
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
  async getReferralStats(userId) {
    try {
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
      const { count: totalInvited } = await this.supabase
        .from('referrals')
        .select('*', { count: 'exact' })
        .eq('referrer_id', userId);

      // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
      const { count: activeReferrals } = await this.supabase
        .from('referrals')
        .select('*', { count: 'exact' })
        .eq('referrer_id', userId)
        .in('status', ['active', 'rewarded']);

      // –û–∂–∏–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      const { count: pendingReferrals } = await this.supabase
        .from('referrals')
        .select('*', { count: 'exact' })
        .eq('referrer_id', userId)
        .eq('status', 'pending');

      // –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
      const { data: friends } = await this.supabase
        .from('referrals')
        .select(`
          status,
          created_at,
          activated_at,
          users!referred_id (
            first_name,
            level,
            subscription_type
          ),
          daily_stats!referred_id (
            completed_tasks,
            date
          )
        `)
        .eq('referrer_id', userId)
        .order('created_at', { ascending: false })
        .limit(10);

      // –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
      const { data: topReferrers } = await this.supabase
        .rpc('get_top_referrers', { limit: 100 });

      const userPosition = topReferrers?.findIndex(r => r.user_id === userId) + 1 || 0;

      return {
        totalInvited: totalInvited || 0,
        activeReferrals: activeReferrals || 0,
        pendingReferrals: pendingReferrals || 0,
        friends: friends || [],
        leaderboardPosition: userPosition,
        daysOfProEarned: (activeReferrals || 0) * 30,
        isPermanentPro: activeReferrals >= 5
      };
    } catch (error) {
      console.error('Error getting referral stats:', error);
      return null;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async notifyReferrer(referrerTelegramId, newUserId) {
    try {
      const { data: newUser } = await this.supabase
        .from('users')
        .select('first_name')
        .eq('id', newUserId)
        .single();

      await this.bot.telegram.sendMessage(
        referrerTelegramId,
        `üéâ *–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!*\n\n` +
        `${newUser?.first_name || '–¢–≤–æ–π –¥—Ä—É–≥'} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ FlowBot –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!\n\n` +
        `–¢–µ–ø–µ—Ä—å –æ–Ω –Ω–∞ –ø—É—Ç–∏ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ! üí™\n\n` +
        `–°–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –¥—Ä—É–≥–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π!`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.error('Error notifying referrer:', error);
    }
  }

  async sendRewardNotifications(referrerId, referredId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { data: users } = await this.supabase
        .from('users')
        .select('id, telegram_id, first_name')
        .in('id', [referrerId, referredId]);

      const referrer = users.find(u => u.id === referrerId);
      const referred = users.find(u => u.id === referredId);

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
      if (referrer) {
        await this.bot.telegram.sendMessage(
          referrer.telegram_id,
          `üèÜ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n` +
          `${referred?.first_name} –ø—Ä–æ—à–µ–ª 7 –¥–Ω–µ–π –≤ FlowBot!\n\n` +
          `‚úÖ –¢—ã –ø–æ–º–æ–≥ –¥—Ä—É–≥—É —Å—Ç–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ!\n` +
          `‚úÖ +1 –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n` +
          `–ü—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–∑—å—è–º:\n` +
          `‚Ä¢ 3 –¥—Ä—É–≥–∞ = –ë–µ–π–¥–∂ "–ê–º–±–∞—Å—Å–∞–¥–æ—Ä"\n` +
          `‚Ä¢ 5 –¥—Ä—É–∑–µ–π = –ë–µ–π–¥–∂ "Founding Member" üëë\n\n` +
          `–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: /referral_stats`,
          { parse_mode: 'Markdown' }
        );
      }

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É
      if (referred) {
        await this.bot.telegram.sendMessage(
          referred.telegram_id,
          `üéä *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!*\n\n` +
          `–¢—ã –ø—Ä–æ—à–µ–ª 7 –¥–Ω–µ–π –∏ —ç—Ç–æ –±–æ–ª—å—à–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n\n` +
          `–¢–µ–ø–µ—Ä—å –ø–æ–º–æ–≥–∏ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º:\n` +
          `üíö –ü–æ–¥–µ–ª–∏—Å—å FlowBot —Å —Ç–µ–º–∏, –∫–æ–º—É —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç\n` +
          `üöÄ –ü–æ–º–æ–≥–∏ –∏–º –≤–æ–π—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞\n\n` +
          `–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /invite —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É!`,
          { parse_mode: 'Markdown' }
        );
      }
    } catch (error) {
      console.error('Error sending notifications:', error);
    }
  }

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  async unlockAchievement(userId, code) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      const { data: achievement } = await this.supabase
        .from('achievements')
        .select('id')
        .eq('code', code)
        .single();

      if (!achievement) return;

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.supabase
        .from('user_achievements')
        .upsert([{
          user_id: userId,
          achievement_id: achievement.id,
          unlocked_at: new Date().toISOString()
        }]);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥—É–±–ª–∏–∫–∞—Ç–∞
      if (error.code !== '23505') {
        console.error('Error unlocking achievement:', error);
      }
    }
  }

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
  async getGlobalStats() {
    try {
      const { count: totalUsers } = await this.supabase
        .from('users')
        .select('*', { count: 'exact' });

      const { data: totalTasksResult } = await this.supabase
        .from('tasks')
        .select('id', { count: 'exact' })
        .eq('completed', true);

      const totalTasks = totalTasksResult?.length || 0;

      // –¶–µ–ª—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
      const communityGoal = 1000;
      const progress = Math.min(100, Math.round((totalUsers / communityGoal) * 100));

      return {
        totalUsers: totalUsers || 0,
        totalTasksCompleted: totalTasks,
        communityGoal: communityGoal,
        progressPercent: progress,
        daysUntilMonetization: Math.max(0, communityGoal - totalUsers)
      };
    } catch (error) {
      console.error('Error getting global stats:', error);
      return null;
    }
  }
}

module.exports = { ReferralService };

// src/services/notificationService.js
const cron = require('node-cron');
const moment = require('moment-timezone');
const dailyInsights = require('../content/dailyInsights');
const { getMotivationalMessage } = require('../content/motivationalMessages');

class NotificationService {
  constructor(bot, supabase, taskService, aiService, userService) {
    this.bot = bot;
    this.supabase = supabase;
    this.taskService = taskService;
    this.aiService = aiService;
    this.userService = userService;
    this.scheduledJobs = new Map();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö cron-–∑–∞–¥–∞—á
  async initialize() {
    try {
      console.log('üïê Initializing notification service...');

      // –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      this.scheduleHourlyCheck();

      // –î–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      this.scheduleDayReminders();

      console.log('‚úÖ Notification service initialized');
      console.log(`üìÖ Cron schedule: Every hour at :00`);
      console.log(`üåÖ Morning tasks: checked every hour`);
      console.log(`üåô Evening reflection: checked every hour`);
    } catch (error) {
      console.error('‚ùå Failed to initialize notification service:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á –ò –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
  scheduleHourlyCheck() {
    console.log('üìå Scheduling hourly check (every hour at :00)...');

    cron.schedule('0 * * * *', async () => {
      const currentHour = moment().tz('Europe/Moscow').hour();
      console.log(`\n‚è∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
      console.log(`‚è∞ Hourly check triggered at ${currentHour}:00`);
      console.log(`‚è∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`);

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏
        await this.sendMorningTasks();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—á–µ—Ä–Ω—é—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
        await this.sendEveningReflection();
      } catch (error) {
        console.error(`‚ùå Error in hourly check:`, error);
      }
    });

    console.log('‚úÖ Hourly check scheduled successfully');
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á
  async sendMorningTasks() {
    const now = moment().tz('Europe/Moscow');
    const currentHour = now.hour();

    console.log(`üåÖ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);
    console.log(`üåÖ Checking MORNING tasks for ${currentHour}:00`);
    console.log(`üåÖ Query: morning_hour = ${currentHour} AND onboarding_completed = true`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å morning_hour = —Ç–µ–∫—É—â–∏–π —á–∞—Å
    const { data: users, error } = await this.supabase
      .from('users')
      .select('*')
      .eq('morning_hour', currentHour)
      .eq('onboarding_completed', true);

    if (error) {
      console.error('‚ùå Error fetching users for morning tasks:', error);
      return;
    }

    console.log(`‚úÖ Found ${users?.length || 0} user(s) for morning tasks at ${currentHour}:00`);

    if (users && users.length > 0) {
      users.forEach(u => {
        console.log(`   - ${u.first_name || u.username} (ID: ${u.telegram_id}, morning_hour: ${u.morning_hour})`);
      });
    }

    for (const user of users) {
      try {
        console.log(`üì§ Sending tasks to user ${user.telegram_id} (${user.first_name || user.username})`);
        await this.sendTasksToUser(user);
      } catch (error) {
        console.error(`‚ùå Error sending tasks to user ${user.telegram_id}:`, error);
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async sendTasksToUser(user) {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let currentDay = user.level || 1;
    try {
      const stats = await this.userService.getUserStats(user.telegram_id);
      if (stats && stats.totalDays !== undefined) {
        currentDay = stats.totalDays || 1;
      }
    } catch (error) {
      console.error('Error getting user stats for morning tasks:', error);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    const taskConfig = this.getTaskConfig(currentDay);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ AI
    const tasks = await this.aiService.generateTasks(taskConfig, user);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await this.taskService.saveDailyTasks(user.id, tasks);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–Ω–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã
    const message = this.formatTasksMessage(tasks, currentDay);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await this.bot.telegram.sendMessage(user.telegram_id, message, {
      parse_mode: 'Markdown',
      reply_markup: this.createTaskKeyboard(tasks)
    });

    console.log(`‚úÖ Sent morning tasks to user ${user.telegram_id} (day ${user.level})`);

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
    const nextLevel = (user.level || 1) + 1;
    await this.supabase
      .from('users')
      .update({ level: nextLevel })
      .eq('id', user.id);

    console.log(`üìà User ${user.telegram_id} level increased: ${user.level} ‚Üí ${nextLevel}`);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á –ø–æ —É—Ä–æ–≤–Ω—é
  getTaskConfig(level) {
    // –î–Ω–∏ 1-5: –†–∞–∑–≥–æ–Ω (30 –ø—Ä–æ—Å—Ç—ã—Ö)
    // –î–Ω–∏ 6-10: –£—Å–ª–æ–∂–Ω–µ–Ω–∏–µ (15 –ø—Ä–æ—Å—Ç—ã—Ö + 10 —Å—Ä–µ–¥–Ω–∏—Ö + 5 —Å–ª–æ–∂–Ω—ã—Ö)
    // –î–Ω–∏ 11+: –ü–æ—Ç–æ–∫ (10 –ø—Ä–æ—Å—Ç—ã—Ö + 10 —Å—Ä–µ–¥–Ω–∏—Ö + 10 —Å–ª–æ–∂–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è)
    if (level <= 5) {
      return { easy: 30, standard: 0, hard: 0 };
    } else if (level <= 10) {
      return { easy: 15, standard: 10, hard: 5 };
    } else {
      return { easy: 10, standard: 10, hard: 10 };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç –¥–Ω—è
  getDailyInsight(level) {
    const key = level <= 15 ? `day${level}` : 'day16plus';
    return dailyInsights[key] || dailyInsights.day1;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏
  formatTasksMessage(tasks, level) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç –¥–Ω—è
    const insight = this.getDailyInsight(level);
    let message = `üí° *${insight.title}*\n\n`;
    message += `${insight.text}\n\n`;
    message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    message += `üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!*\n`;
    if (level <= 15) {
      message += `üìÖ –î–µ–Ω—å ${level} –∏–∑ 15\n\n`;
    } else {
      message += `üìÖ –î–µ–Ω—å ${level} (—Ç—ã –≤ –ø–æ—Ç–æ–∫–µ! üéâ)\n\n`;
    }
    message += `*–¢–≤–æ–π Flow List –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n`;
    
    const easyTasks = tasks.filter(t => t.type === 'easy');
    const standardTasks = tasks.filter(t => t.type === 'standard');
    const hardTasks = tasks.filter(t => t.type === 'hard');
    const magicTask = tasks.find(t => t.type === 'magic');
    
    if (easyTasks.length > 0) {
      message += `üíö *–ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏:*\n`;
      easyTasks.forEach((task, i) => {
        message += `${i + 1}. ${task.text}\n`;
      });
      message += '\n';
    }
    
    if (standardTasks.length > 0) {
      message += `üíõ *–°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:*\n`;
      standardTasks.forEach((task, i) => {
        message += `${i + 1}. ${task.text}\n`;
      });
      message += '\n';
    }
    
    if (hardTasks.length > 0) {
      message += `‚ù§Ô∏è *–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n`;
      hardTasks.forEach((task, i) => {
        message += `${i + 1}. ${task.text}\n`;
      });
      message += '\n';
    }
    
    if (magicTask) {
      message += `‚ú® *–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞:*\n${magicTask.text}\n\n`;
    }
    
    message += `_–ù–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ –∏ –≤–æ–π–¥–∏ –≤ –ø–æ—Ç–æ–∫!_`;
    
    return message;
  }

  // –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞—á
  createTaskKeyboard(tasks) {
    return {
      inline_keyboard: [
        [
          { text: 'üìã –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'show_tasks' }
        ],
        [
          { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats' }
        ]
      ]
    };
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
  async sendEveningReflection() {
    const now = moment().tz('Europe/Moscow');
    const currentHour = now.hour();

    console.log(`üåô ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);
    console.log(`üåô Checking EVENING reflection for ${currentHour}:00`);
    console.log(`üåô Query: evening_hour = ${currentHour} AND onboarding_completed = true`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å evening_hour = —Ç–µ–∫—É—â–∏–π —á–∞—Å
    const { data: users, error } = await this.supabase
      .from('users')
      .select('*')
      .eq('evening_hour', currentHour)
      .eq('onboarding_completed', true);

    if (error) {
      console.error('‚ùå Error fetching users for evening reflection:', error);
      return;
    }

    console.log(`‚úÖ Found ${users?.length || 0} user(s) for evening reflection at ${currentHour}:00`);

    if (users && users.length > 0) {
      users.forEach(u => {
        console.log(`   - ${u.first_name || u.username} (ID: ${u.telegram_id}, evening_hour: ${u.evening_hour})`);
      });
    }

    for (const user of users) {
      try {
        console.log(`üì§ Sending reflection to user ${user.telegram_id} (${user.first_name || user.username})`);
        await this.sendReflectionToUser(user);
      } catch (error) {
        console.error(`‚ùå Error sending reflection to user ${user.telegram_id}:`, error);
      }
    }
  }

  // –î–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (14:00 –∏ 18:00)
  scheduleDayReminders() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 14:00
    cron.schedule('0 14 * * *', async () => {
      console.log('‚è∞ Sending afternoon reminders (14:00)...');
      await this.sendDayReminders('afternoon');
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 18:00
    cron.schedule('0 18 * * *', async () => {
      console.log('‚è∞ Sending evening reminders (18:00)...');
      await this.sendDayReminders('evening');
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  async sendDayReminders(timeOfDay) {
    const { data: users, error } = await this.supabase
      .from('users')
      .select('*')
      .eq('onboarding_completed', true);

    if (error) {
      console.error('Error fetching users for reminders:', error);
      return;
    }

    const today = moment().tz('Europe/Moscow').format('YYYY-MM-DD');

    for (const user of users) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        const tasks = await this.taskService.getUserTasksForDate(user.telegram_id, today);

        if (tasks.length === 0) {
          continue; // –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        }

        const completed = tasks.filter(t => t.completed).length;
        const total = tasks.length;
        const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;

        // –ü–æ–ª—É—á–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const motivationalMsg = getMotivationalMessage(completed, total, timeOfDay);

        // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ null - –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ö–æ—Ä–æ—à–∏–π, –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–º
        if (!motivationalMsg) {
          console.log(`‚úÖ User ${user.telegram_id} has good progress (${percentage}%), skipping reminder`);
          continue;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = `${motivationalMsg.emoji} *${motivationalMsg.title}*\n\n${motivationalMsg.text}`;

        await this.bot.telegram.sendMessage(user.telegram_id, message, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìã –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }]
            ]
          }
        });

        console.log(`‚úÖ Sent ${timeOfDay} reminder to user ${user.telegram_id} (${completed}/${total} tasks, ${percentage}%)`);
      } catch (error) {
        console.error(`Error sending day reminder to user ${user.telegram_id}:`, error);
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async sendReflectionToUser(user) {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
    const today = moment().tz(user.timezone || 'Europe/Moscow').format('YYYY-MM-DD');
    const tasks = await this.taskService.getUserTasksForDate(user.telegram_id, today);

    const completed = tasks.filter(t => t.completed).length;
    const total = tasks.length;
    const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    let message = `üåô *–í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è*\n\n`;
    message += `üìä –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completed}/${total} –∑–∞–¥–∞—á (${percentage}%)\n`;
    message += `üî• –°—Ç—Ä–∏–∫: ${user.current_streak || 0} –¥–Ω–µ–π\n\n`;

    if (percentage < 100) {
      // –ù–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–∫—Ä—ã—Ç—ã - –º–æ—Ç–∏–≤–∏—Ä—É–µ–º
      message += `‚ö†Ô∏è *–í–∞–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏!*\n`;
      message += `–ö–∞–∂–¥–∞—è –∑–∞–∫—Ä—ã—Ç–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —ç—Ç–æ –∫–∏—Ä–ø–∏—á–∏–∫ —Ç–≤–æ–µ–π –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.\n\n`;
      message += `üí™ *–ó–∞–≤—Ç—Ä–∞ —É —Ç–µ–±—è —Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è!*\n\n`;
      message += `–ü–æ–º–Ω–∏: –≥–ª–∞–≤–Ω–æ–µ –Ω–µ —Å–∫–æ—Ä–æ—Å—Ç—å, –∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å. –ó–∞–∫—Ä—ã–≤–∞–π –≤—Å–µ –∑–∞–¥–∞—á–∏, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –∂–¥–∞—Ç—å!\n\n`;
    } else {
      // –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–∫—Ä—ã—Ç—ã - —Ö–≤–∞–ª–∏–º
      const { g } = require('../utils/genderUtils');
      message += `üéâ *–û—Ç–ª–∏—á–Ω–æ! –¢—ã ${g(user, '–∑–∞–∫—Ä—ã–ª', '–∑–∞–∫—Ä—ã–ª–∞')} –≤—Å–µ –∑–∞–¥–∞—á–∏!*\n`;
      message += `–¢–∞–∫ —Ç—ã —Ñ–æ—Ä–º–∏—Ä—É–µ—à—å –∂–µ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n`;
      message += `–¢—ã ${g(user, '–º–æ–ª–æ–¥–µ—Ü', '–º–æ–ª–æ–¥–µ—Ü')}! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™\n\n`;
    }

    message += `–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?`;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = [
      [
        { text: 'üòä –û—Ç–ª–∏—á–Ω–æ', callback_data: 'mood_great' },
        { text: 'üëç –•–æ—Ä–æ—à–æ', callback_data: 'mood_good' }
      ],
      [
        { text: 'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ', callback_data: 'mood_normal' },
        { text: 'üòî –£—Å—Ç–∞–ª', callback_data: 'mood_tired' }
      ]
    ];

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if (percentage < 100) {
      keyboard.push([
        { text: 'üìã –ó–∞–∫—Ä—ã—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏', callback_data: 'show_tasks' }
      ]);
    }

    await this.bot.telegram.sendMessage(user.telegram_id, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  }
}

module.exports = { NotificationService };

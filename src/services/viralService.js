// src/services/viralService.js
const moment = require('moment-timezone');
const { Markup } = require('telegraf');

/**
 * Viral Service - —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Å–∞—Ä–∞—Ñ–∞–Ω–Ω–æ–≥–æ —Ä–∞–¥–∏–æ
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞ 7-–π –¥–µ–Ω—å
 */
class ViralService {
  constructor(supabase, bot, referralService) {
    this.supabase = supabase;
    this.bot = bot;
    this.referralService = referralService;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ 7-–π –¥–µ–Ω—å
   */
  async checkAndSendDay7Trigger(telegramId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 7 –¥–Ω–µ–π
      const hasPassed7Days = await this.hasUserCompleted7Days(telegramId);

      if (!hasPassed7Days) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä
      const alreadySent = await this.hasTriggeredDay7(telegramId);

      if (alreadySent) {
        return false;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
      await this.sendDay7InviteTrigger(telegramId);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
      await this.markTriggeredDay7(telegramId);

      return true;
    } catch (error) {
      console.error('Error checking day 7 trigger:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 7 –¥–Ω–µ–π
   */
  async hasUserCompleted7Days(telegramId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π
      const { data: stats } = await this.supabase
        .from('daily_stats')
        .select('date, completed_tasks')
        .eq('user_telegram_id', telegramId)
        .gte('completed_tasks', 10) // –ú–∏–Ω–∏–º—É–º 10 –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å
        .order('date', { ascending: false })
        .limit(10);

      if (!stats || stats.length < 7) {
        return false; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å 7 –¥–Ω–µ–π —Å 10+ –∑–∞–¥–∞—á–∞–º–∏
      const activeDays = stats.filter(s => s.completed_tasks >= 10);
      return activeDays.length >= 7;
    } catch (error) {
      console.error('Error checking 7 days:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ 7-–π –¥–µ–Ω—å
   */
  async hasTriggeredDay7(telegramId) {
    try {
      const { data } = await this.supabase
        .from('viral_triggers')
        .select('id')
        .eq('user_telegram_id', telegramId)
        .eq('trigger_type', 'day7_invite')
        .single();

      return !!data;
    } catch (error) {
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç - —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è
      return false;
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ 7-–π –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
   */
  async markTriggeredDay7(telegramId) {
    try {
      await this.supabase
        .from('viral_triggers')
        .insert([{
          user_telegram_id: telegramId,
          trigger_type: 'day7_invite',
          triggered_at: new Date().toISOString()
        }]);
    } catch (error) {
      console.error('Error marking day 7 trigger:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ 7-–π –¥–µ–Ω—å - –ø—Ä–∏–∑—ã–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
   */
  async sendDay7InviteTrigger(telegramId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: user } = await this.supabase
        .from('users')
        .select('telegram_id, first_name')
        .eq('telegram_id', telegramId)
        .single();

      if (!user) {
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: stats } = await this.supabase
        .from('daily_stats')
        .select('completed_tasks')
        .eq('user_telegram_id', telegramId)
        .gte('completed_tasks', 1);

      const totalTasks = stats?.reduce((sum, day) => sum + day.completed_tasks, 0) || 0;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message =
        `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${user.first_name}!*\n\n` +
        `–¢—ã –ø—Ä–æ—à–µ–ª –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n` +
        `–ó–∞ 7 –¥–Ω–µ–π —Ç—ã:\n` +
        `‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª ${totalTasks}+ –∑–∞–¥–∞—á\n` +
        `‚úÖ –í–æ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞\n` +
        `‚úÖ –ü–æ–±–µ–¥–∏–ª –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é\n\n` +
        `üí° *–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —à–∞–Ω—Å –ø–æ–º–æ—á—å —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö –∂–∏–∑–Ω—å!*\n\n` +
        `–ü–æ–¥–µ–ª–∏—Å—å FlowBot —Å —Ç–µ–º–∏, –∫–æ–º—É —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç:\n` +
        `‚Ä¢ –î—Ä—É–∑—å—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä—É—é—Ç\n` +
        `‚Ä¢ –ö–æ–ª–ª–µ–≥–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –±–æ–ª—å—à–µ —É—Å–ø–µ–≤–∞—Ç—å\n` +
        `‚Ä¢ –í—Å–µ–º, –∫—Ç–æ –º–µ—á—Ç–∞–µ—Ç –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n` +
        `–ù–µ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã, –∞ —á—Ç–æ–±—ã –æ–Ω–∏ —Ç–æ–∂–µ —Å—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ üí™`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏', 'share_telegram')],
        [Markup.button.callback('üìä –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'referral_stats')]
      ]);

      await this.bot.telegram.sendMessage(
        user.telegram_id,
        message,
        {
          parse_mode: 'Markdown',
          ...keyboard
        }
      );

      console.log(`‚úÖ Day 7 viral trigger sent to user ${telegramId}`);
    } catch (error) {
      console.error('Error sending day 7 trigger:', error);
    }
  }

  /**
   * –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ 14-–π –¥–µ–Ω—å (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–µ–ª–∏–ª—Å—è)
   */
  async checkAndSendDay14Reminder(telegramId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–µ–ª –ª–∏ 14 –¥–Ω–µ–π
      const hasPassed14Days = await this.hasUserCompleted14Days(telegramId);

      if (!hasPassed14Days) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä
      const alreadySent = await this.hasTriggeredDay14(telegramId);

      if (alreadySent) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–µ–ª–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const hasShared = await this.hasUserShared(telegramId);

      if (hasShared) {
        return false; // –£–∂–µ –ø–æ–¥–µ–ª–∏–ª—Å—è, –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      await this.sendDay14Reminder(telegramId);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
      await this.markTriggeredDay14(telegramId);

      return true;
    } catch (error) {
      console.error('Error checking day 14 reminder:', error);
      return false;
    }
  }

  async hasUserCompleted14Days(telegramId) {
    try {
      const { data: stats } = await this.supabase
        .from('daily_stats')
        .select('date, completed_tasks')
        .eq('user_telegram_id', telegramId)
        .gte('completed_tasks', 10)
        .order('date', { ascending: false })
        .limit(15);

      const activeDays = stats?.filter(s => s.completed_tasks >= 10) || [];
      return activeDays.length >= 14;
    } catch (error) {
      console.error('Error checking 14 days:', error);
      return false;
    }
  }

  async hasTriggeredDay14(telegramId) {
    try {
      const { data } = await this.supabase
        .from('viral_triggers')
        .select('id')
        .eq('user_telegram_id', telegramId)
        .eq('trigger_type', 'day14_reminder')
        .single();

      return !!data;
    } catch (error) {
      return false;
    }
  }

  async markTriggeredDay14(telegramId) {
    try {
      await this.supabase
        .from('viral_triggers')
        .insert([{
          user_telegram_id: telegramId,
          trigger_type: 'day14_reminder',
          triggered_at: new Date().toISOString()
        }]);
    } catch (error) {
      console.error('Error marking day 14 trigger:', error);
    }
  }

  async hasUserShared(telegramId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ—Ñ–µ—Ä–∞–ª
      const { count } = await this.supabase
        .from('referrals')
        .select('*', { count: 'exact' })
        .eq('referrer_telegram_id', telegramId);

      return count > 0;
    } catch (error) {
      console.error('Error checking if user shared:', error);
      return false;
    }
  }

  async sendDay14Reminder(telegramId) {
    try {
      const { data: user } = await this.supabase
        .from('users')
        .select('telegram_id, first_name')
        .eq('telegram_id', telegramId)
        .single();

      if (!user) {
        return;
      }

      const message =
        `üí™ *${user.first_name}, —Ç—ã —É–∂–µ 2 –Ω–µ–¥–µ–ª–∏ –≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!*\n\n` +
        `–≠—Ç–æ –∫—Ä—É—Ç–æ! –¢—ã –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ—é –∂–∏–∑–Ω—å.\n\n` +
        `–ü–æ–º–Ω–∏—à—å, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è FlowBot —Å –¥—Ä—É–∑—å—è–º–∏?\n` +
        `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∏–º —Ç–∞–∫ –∂–µ, –∫–∞–∫ –ø–æ–º–æ–≥–ª–æ —Ç–µ–±–µ.\n\n` +
        `üíö –ü–æ–¥–µ–ª–∏—Å—å —Å —Ç–µ–º–∏, –∫–æ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ!\n\n` +
        `–ù–∞–∂–º–∏ /invite —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É`;

      await this.bot.telegram.sendMessage(
        user.telegram_id,
        message,
        { parse_mode: 'Markdown' }
      );

      console.log(`‚úÖ Day 14 reminder sent to user ${telegramId}`);
    } catch (error) {
      console.error('Error sending day 14 reminder:', error);
    }
  }
}

module.exports = { ViralService };

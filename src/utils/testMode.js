// src/utils/testMode.js
// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API

class TestMode {
    constructor() {
        this.enabled = process.env.NODE_ENV === 'test' || process.env.TEST_MODE === 'true';
        this.testUsers = new Map();
        this.testTasks = new Map();
        
        if (this.enabled) {
            console.log('üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù');
            console.log('   - –ë–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤');
            console.log('   - –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏');
            console.log('   - –ú–æ–∫ –æ—Ç–≤–µ—Ç—ã –æ—Ç AI');
        }
    }

    // –ú–æ–∫ –¥–ª—è OpenAI
    async generateTasks(level = 1) {
        const tasks = [];
        const config = this.getTaskConfig(level);
        
        // –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
        const easyTasks = [
            "üíß –í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã",
            "üòä –£–ª—ã–±–Ω—É—Ç—å—Å—è —Å–µ–±–µ –≤ –∑–µ—Ä–∫–∞–ª–æ",
            "üå¨Ô∏è –°–¥–µ–ª–∞—Ç—å 5 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤",
            "üö∂ –í—Å—Ç–∞—Ç—å –∏ —Ä–∞–∑–º—è—Ç—å—Å—è",
            "üì± –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—Ä—è–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            "ü™ü –û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –¥–ª—è —Å–≤–µ–∂–µ–≥–æ –≤–æ–∑–¥—É—Ö–∞",
            "‚òï –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ —á–∞–π",
            "üéµ –í–∫–ª—é—á–∏—Ç—å –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é",
            "üìù –ó–∞–ø–∏—Å–∞—Ç—å –æ–¥–Ω—É –º—ã—Å–ª—å",
            "üëã –ü–æ–∑–≤–æ–Ω–∏—Ç—å –±–ª–∏–∑–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É"
        ];
        
        // –°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
        const mediumTasks = [
            "üìß –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –≤–∞–∂–Ω—ã—Ö –ø–∏—Å—å–º–∞",
            "üìö –ü—Ä–æ—á–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏",
            "üßπ –£–±—Ä–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ",
            "üìã –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
            "üèÉ –°–¥–µ–ª–∞—Ç—å 15-–º–∏–Ω—É—Ç–Ω—É—é –∑–∞—Ä—è–¥–∫—É",
            "üçé –ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –ø–µ—Ä–µ–∫—É—Å",
            "üìû –ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –≤—Å—Ç—Ä–µ—á—É",
            "üí° –ù–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–±–ª–µ–º—ã",
            "üéØ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å 3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ –¥–µ–Ω—å",
            "üìà –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º"
        ];
        
        // –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏
        const hardTasks = [
            "üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç",
            "üíª –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
            "üìë –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
            "üé® –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ç",
            "üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é –∏–ª–∏ –ø–æ—Å—Ç",
            "üîç –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
            "üíº –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∞–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
            "üìö –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫",
            "ü§ù –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã",
            "üéØ –î–æ—Å—Ç–∏—á—å –Ω–µ–¥–µ–ª—å–Ω–æ–π —Ü–µ–ª–∏"
        ];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É
        for (let i = 0; i < config.easy; i++) {
            tasks.push({
                text: easyTasks[i % easyTasks.length],
                type: 'easy',
                position: tasks.length + 1
            });
        }
        
        for (let i = 0; i < config.standard; i++) {
            tasks.push({
                text: mediumTasks[i % mediumTasks.length],
                type: 'standard',
                position: tasks.length + 1
            });
        }
        
        for (let i = 0; i < config.hard; i++) {
            tasks.push({
                text: hardTasks[i % hardTasks.length],
                type: 'hard',
                position: tasks.length + 1
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
        tasks.push({
            text: "‚ú® –ù–∞–π—Ç–∏ –º–æ–Ω–µ—Ç–∫—É –Ω–∞ —É–¥–∞—á—É",
            type: 'magic',
            position: tasks.length + 1
        });
        
        return tasks;
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ —É—Ä–æ–≤–Ω—è–º
    getTaskConfig(level) {
        if (level <= 5) {
            return { easy: 29, standard: 0, hard: 0 };
        } else if (level <= 10) {
            return { easy: 19, standard: 10, hard: 0 };
        } else {
            return { easy: 9, standard: 10, hard: 10 };
        }
    }

    // –ú–æ–∫ –¥–ª—è Supabase
    async mockSupabase() {
        return {
            from: (table) => ({
                select: () => ({
                    eq: () => ({
                        single: async () => ({ data: this.getMockUser(), error: null }),
                        data: []
                    }),
                    data: []
                }),
                insert: async (data) => ({ data, error: null }),
                update: async (data) => ({ data, error: null }),
                upsert: async (data) => ({ data, error: null })
            })
        };
    }

    // –ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    getMockUser() {
        return {
            id: 1,
            telegram_id: 123456789,
            username: 'test_user',
            first_name: 'Test',
            last_name: 'User',
            level: 1,
            subscription_type: 'pro',
            subscription_end: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
            morning_hour: 8,
            evening_hour: 21,
            timezone: 'Europe/Moscow',
            language: 'ru',
            onboarding_completed: true,
            created_at: new Date()
        };
    }

    // –ú–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    getMockStats() {
        return {
            total_tasks: 30,
            completed_tasks: Math.floor(Math.random() * 30),
            current_streak: Math.floor(Math.random() * 15),
            longest_streak: 15,
            total_days: 30,
            achievements_count: Math.floor(Math.random() * 10),
            flow_score: Math.floor(Math.random() * 100)
        };
    }

    // –ú–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    getMockAchievements() {
        return [
            {
                name: 'üéØ –ü–µ—Ä–≤—ã–π —à–∞–≥',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É',
                unlocked: true
            },
            {
                name: 'üî• –í –ø–æ—Ç–æ–∫–µ',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å 10 –∑–∞–¥–∞—á –ø–æ–¥—Ä—è–¥',
                unlocked: true
            },
            {
                name: 'üëë –ö–æ—Ä–æ–ª—å –¥–Ω—è',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ 30 –∑–∞–¥–∞—á',
                unlocked: false
            },
            {
                name: 'üìà –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
                description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
                unlocked: false
            },
            {
                name: 'üöÄ –õ–µ–≥–µ–Ω–¥–∞',
                description: '15 –¥–Ω–µ–π –≤ –ø–æ—Ç–æ–∫–µ (–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –¥–∞–ª—å—à–µ)',
                unlocked: false
            }
        ];
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    isEnabled() {
        return this.enabled;
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    log(message, data = null) {
        if (this.enabled) {
            console.log(`[TEST MODE] ${message}`);
            if (data) {
                console.log(JSON.stringify(data, null, 2));
            }
        }
    }
}

module.exports = new TestMode();
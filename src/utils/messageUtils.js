// src/utils/messageUtils.js

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
 */
async function sendOrEditMessage(ctx, text, extra = {}) {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!ctx.session) {
      ctx.session = {};
    }

    const lastMessageId = ctx.session.lastBotMessageId;
    const isCallbackQuery = !!ctx.callbackQuery;

    console.log(`üîÑ sendOrEditMessage: lastMessageId=${lastMessageId}, isCallbackQuery=${isCallbackQuery}, hasSession=${!!ctx.session}`);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∏ —ç—Ç–æ callback query - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if (lastMessageId && isCallbackQuery) {
      console.log(`‚úèÔ∏è Editing message ${lastMessageId}`);
      try {
        const result = await ctx.editMessageText(text, {
          parse_mode: 'Markdown',
          ...extra
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
        if (result && result.message_id) {
          ctx.session.lastBotMessageId = result.message_id;
        }
        
        return result;
      } catch (error) {
        // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –∫–æ–Ω—Ç–µ–Ω—Ç –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –∏ —Ç.–¥.)
        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('‚ö†Ô∏è Failed to edit message, sending new:', error.message);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const result = await ctx.replyWithMarkdown(text, extra);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (result && result.message_id) {
      ctx.session.lastBotMessageId = result.message_id;
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå Error in sendOrEditMessage:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try {
      return await ctx.reply(text);
    } catch (fallbackError) {
      console.error('‚ùå Fallback message failed:', fallbackError);
      throw fallbackError;
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 * (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ, –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ)
 */
async function sendNewMessage(ctx, text, extra = {}) {
  try {
    const result = await ctx.replyWithMarkdown(text, extra);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (result && result.message_id && ctx.session) {
      ctx.session.lastBotMessageId = result.message_id;
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå Error in sendNewMessage:', error);
    throw error;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function editMessage(ctx, text, extra = {}) {
  try {
    return await ctx.editMessageText(text, {
      parse_mode: 'Markdown',
      ...extra
    });
  } catch (error) {
    console.error('‚ùå Error in editMessage:', error);
    throw error;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
 * –ü–æ–ª–µ–∑–Ω–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function clearLastMessageId(ctx) {
  if (ctx.session) {
    ctx.session.lastBotMessageId = null;
  }
}

module.exports = {
  sendOrEditMessage,
  sendNewMessage,
  editMessage,
  clearLastMessageId
};
// src/handlers/taskHandler.js
const { Markup } = require('telegraf');
const moment = require('moment-timezone');
const { sendOrEditMessage } = require('../utils/messageUtils');
const { g, getWord } = require('../utils/genderUtils');

class TaskHandler {
  constructor(supabase = null) {
    this.tasksPerPage = 10;
    this.supabase = supabase;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  async showTodayTasks(ctx, taskService, user, editMessage = false) {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!ctx.session) {
        ctx.session = {};
      }
      
      const today = moment().tz('Europe/Moscow').format('YYYY-MM-DD');
      const tasks = await taskService.getUserTasksForDate(user.id, today);
      
      if (!tasks || tasks.length === 0) {
        await this.showTaskCreationModeSelection(ctx, user);
        return;
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø–∞–º
      const tasksByType = this.groupTasksByType(tasks);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º user.level –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞ –¥–Ω—è
      const currentDay = user.level || 1;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = `üìÖ *–ú–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n`;
      if (currentDay <= 30) {
        message += `–î–µ–Ω—å ${currentDay} –∏–∑ 30\n\n`;
      } else {
        message += `–î–µ–Ω—å ${currentDay} (–ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ)\n\n`;
      }
      
      // –°—á–µ—Ç—á–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const completed = tasks.filter(t => t.completed).length;
      const total = tasks.length;
      const percentage = Math.round((completed / total) * 100);
      
      message += `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${completed}/${total} (${percentage}%)\n`;
      message += this.getProgressBar(percentage) + '\n\n';
      
      // –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      if (tasksByType.easy.length > 0) {
        message += `üíö *–ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏:*\n`;
        message += this.formatTaskList(tasksByType.easy);
      }

      if (tasksByType.standard.length > 0) {
        message += `\nüíõ *–°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:*\n`;
        message += this.formatTaskList(tasksByType.standard);
      }

      // –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º –µ—Å–ª–∏ –Ω–µ—Ç
      const hardTasksCount = tasksByType.hard.length;
      const hardTasksExpected = user.level >= 11 ? 8 : 0;

      if (hardTasksExpected > 0) {
        message += `\nüî¥ *–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ (${hardTasksCount}/${hardTasksExpected}):*\n`;

        if (hardTasksCount > 0) {
          message += this.formatTaskList(tasksByType.hard);
        }

        if (hardTasksCount === 0) {
          // –ö–æ–≥–¥–∞ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –∑–∞–¥–∞—á - –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          message += `\nüí° _–î–æ–±–∞–≤—å 8 —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫" –Ω–∏–∂–µ_ ‚¨áÔ∏è\n`;
        } else if (hardTasksCount < hardTasksExpected) {
          // –ö–æ–≥–¥–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
          const needMore = hardTasksExpected - hardTasksCount;
          const taskWord = needMore === 1 ? '–∑–∞–¥–∞—á—É' : (needMore < 5 ? '–∑–∞–¥–∞—á–∏' : '–∑–∞–¥–∞—á');
          message += `\n‚ûï _–î–æ–±–∞–≤—å –µ—â—ë ${needMore} ${taskWord}_\n`;
        }
      }

      if (tasksByType.magic.length > 0) {
        message += `\n‚ú® *–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞:*\n`;
        message += this.formatTaskList(tasksByType.magic);
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞
      if (ctx.session.tasksPage === undefined) {
        ctx.session.tasksPage = 0;
      }
      
      // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const keyboard = this.createTasksKeyboard(tasks, ctx.session.tasksPage);
      
      await sendOrEditMessage(ctx, message, keyboard);
    } catch (error) {
      console.error('Error showing tasks:', error);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
  async completeTask(ctx, taskService, taskId) {
    try {
      // 1. –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É (–∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
      const task = await taskService.completeTask(taskId);

      if (!task) {
        await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', true);
        return;
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
      let motivationalMsg;
      if (task.task_type === 'magic') {
        // –î–ª—è –º–∞–≥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ - –æ—Å–æ–±–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        const user = ctx.state.user;
        await ctx.reply(this.getMagicTaskMessage(user), { parse_mode: 'Markdown' });
        motivationalMsg = '‚ú® –ú–∞–≥–∏—è!';
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á - –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        const today = moment().tz('Europe/Moscow').format('YYYY-MM-DD');
        const allTasksNow = await taskService.getUserTasksForDate(task.telegram_id, today);
        const completedCount = allTasksNow.filter(t => t.completed).length;
        motivationalMsg = this.getMotivationalMessage(completedCount);
      }

      // 3. –°–†–ê–ó–£ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.answerCbQuery(motivationalMsg);

      // 4. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É + –æ–±–Ω–æ–≤–∏—Ç—å UI
      const [stats] = await Promise.all([
        taskService.getDailyStats(task.telegram_id),
        this.updateTaskMessage(ctx, taskService, task.telegram_id)
      ]);

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π - –≤ —Ñ–æ–Ω–µ
      setImmediate(async () => {
        this.checkAchievements(stats);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –í–°–ï–• –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–∫—Ä–æ–º–µ –º–∞–≥–∏—á–µ—Å–∫–æ–π)
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –∏–∑ –ë–î, –∞ –Ω–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const today = moment().tz('Europe/Moscow').format('YYYY-MM-DD');
        const allTasks = await taskService.getUserTasksForDate(task.telegram_id, today);

        // –ò—Å–∫–ª—é—á–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –∏–∑ –ø–æ–¥—Å—á—ë—Ç–∞
        const regularTasks = allTasks.filter(t => t.task_type !== 'magic');
        const totalTasks = regularTasks.length;
        const completedTasks = regularTasks.filter(t => t.completed).length;

        console.log(`üìä Task completion check: ${completedTasks}/${totalTasks} regular tasks completed (excluding magic)`);

        if (completedTasks === totalTasks && totalTasks > 0) {
          console.log(`üéâ All tasks completed! Updating streak and incrementing user level`);
          const user = ctx.state.user; // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

          // 1. –°–ù–ê–ß–ê–õ–ê –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫ (–∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ!)
          await taskService.updateStreak(task.telegram_id);

          // 2. –ü–û–¢–û–ú —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á
          const currentLevel = user.level || 1;
          const nextLevel = currentLevel + 1;

          await this.supabase
            .from('users')
            .update({ level: nextLevel })
            .eq('telegram_id', task.telegram_id);

          console.log(`üìà User ${task.telegram_id} level increased: ${currentLevel} ‚Üí ${nextLevel}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º user object –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
          user.level = nextLevel;

          this.sendEpicCompletion(ctx, stats, user).catch(err =>
            console.error('Error sending epic completion:', err)
          );
        }
      });

    } catch (error) {
      console.error('Error completing task:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', true);
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
  async toggleTask(ctx, taskService, taskId) {
    try {
      const task = await taskService.toggleTask(taskId);
      
      if (!task) {
        await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', true);
        return;
      }

      const message = task.completed 
        ? '‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!' 
        : '‚è∏ –ó–∞–¥–∞—á–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞';
      
      await ctx.answerCbQuery(message);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏
      await this.updateTaskMessage(ctx, taskService, task.telegram_id);
      
    } catch (error) {
      console.error('Error toggling task:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', true);
    }
  }

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ —Ç–∏–ø–∞–º
  groupTasksByType(tasks) {
    return {
      easy: tasks.filter(t => t.task_type === 'easy'),
      standard: tasks.filter(t => t.task_type === 'standard'),
      hard: tasks.filter(t => t.task_type === 'hard'),
      magic: tasks.filter(t => t.task_type === 'magic')
    };
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
  formatTaskList(tasks) {
    return tasks.map((task, index) => {
      const checkbox = task.completed ? '‚úÖ' : '‚¨ú';
      const prefix = task.is_custom ? 'üë§' : 'üåü';
      const text = task.completed 
        ? `~${task.task_text}~` 
        : task.task_text;
      return `${checkbox} ${prefix} ${text}`;
    }).join('\n') + '\n';
  }

  // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
  getProgressBar(percentage) {
    const filled = Math.round(percentage / 10);
    const empty = 10 - filled;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —è—Ä–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    const filledChar = 'üü©'; // –ó–µ–ª–µ–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏
    const emptyChar = '‚¨ú'; // –ë–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç –¥–ª—è –ø—É—Å—Ç–æ–π —á–∞—Å—Ç–∏
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    let emoji = '';
    if (percentage === 0) emoji = 'üò¥';
    else if (percentage < 25) emoji = 'üå±';
    else if (percentage < 50) emoji = 'üö∂';
    else if (percentage < 75) emoji = 'üèÉ';
    else if (percentage < 100) emoji = 'üî•';
    else emoji = 'üéØ';
    
    return filledChar.repeat(filled) + emptyChar.repeat(empty) + ` ${emoji} ${percentage}%`;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–¥–∞—á
  createTasksKeyboard(tasks, page = 0) {
    const buttons = [];
    const TASKS_PER_PAGE = 5;
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    buttons.push([
      Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫', 'edit_list_menu'),
      Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á–∏', 'refresh_confirmation')
    ]);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const uncompletedTasks = tasks.filter(t => !t.completed);
    const totalPages = Math.ceil(uncompletedTasks.length / TASKS_PER_PAGE);
    
    // –ë–µ—Ä–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const startIndex = page * TASKS_PER_PAGE;
    const endIndex = startIndex + TASKS_PER_PAGE;
    const pageTasks = uncompletedTasks.slice(startIndex, endIndex);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pageTasks.forEach(task => {
      buttons.push([
        Markup.button.callback(
          `‚¨ú ${task.task_text.substring(0, 30)}...`,
          `task_${task.id}`
        )
      ]);
    });
    
    // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –∑–∞–¥–∞—á –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (totalPages > 1) {
      const paginationButtons = [];
      if (page > 0) {
        paginationButtons.push(Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'tasks_page_prev'));
      }
      paginationButtons.push(Markup.button.callback(`${page + 1}/${totalPages}`, 'tasks_page_info'));
      if (page < totalPages - 1) {
        paginationButtons.push(Markup.button.callback('–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è', 'tasks_page_next'));
      }
      buttons.push(paginationButtons);
    }

    buttons.push([
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', 'show_daily_stats')
    ]);

    buttons.push([
      Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'show_main_menu'),
      Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'show_settings')
    ]);

    return Markup.inlineKeyboard(buttons);
  }

  // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–µ–Ω–¥–µ—Ä–Ω–æ-–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ)
  getMotivationalMessage(completedCount) {
    const messages = {
      1: 'üéØ –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ!',
      5: 'üî• –¢—ã –≤ –æ–≥–Ω–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π!',
      10: '‚ö° 10 –∑–∞–¥–∞—á! –¢—ã –≤ –ø–æ—Ç–æ–∫–µ!',
      15: 'üí™ –ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞!',
      20: 'üöÄ 20 –∑–∞–¥–∞—á! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!',
      25: 'üåü –ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏!',
      30: 'üëë –í–°–ï 30! –¢—ã –ª–µ–≥–µ–Ω–¥–∞ –¥–Ω—è!'
    };

    return messages[completedCount] || `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${completedCount} –∑–∞–¥–∞—á!`;
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
  getMagicTaskMessage(user) {
    return `‚ú®üéâ *–ú–ê–ì–ò–Ø –°–í–ï–†–®–ò–õ–ê–°–¨!* üéâ‚ú®

–¢—ã ${g(user, '—Å–æ–≤–µ—Ä—à–∏–ª', '—Å–æ–≤–µ—Ä—à–∏–ª–∞')} –Ω–µ—á—Ç–æ –≤–æ–ª—à–µ–±–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è!

üí´ –ß—É–¥–µ—Å–∞ —Å–ª—É—á–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî
—Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ ${g(user, '—Å–æ–∑–¥–∞–ª', '—Å–æ–∑–¥–∞–ª–∞')} –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö!

üåü –í –∂–∏–∑–Ω–∏ —Ç–∞–∫ –º–Ω–æ–≥–æ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞,
–Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–∑–∞ –∏ ${g(user, '–ø–æ–≤–µ—Ä–∏—Ç—å', '–ø–æ–≤–µ—Ä–∏—Ç—å')}!`;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏
  async updateTaskMessage(ctx, taskService, userId) {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!ctx.session) {
        ctx.session = {};
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
      const today = moment().tz('Europe/Moscow').format('YYYY-MM-DD');
      const tasks = await taskService.getUserTasksForDate(userId, today);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const TASKS_PER_PAGE = 5;
      const uncompletedTasks = tasks.filter(t => !t.completed);
      const totalPages = Math.ceil(uncompletedTasks.length / TASKS_PER_PAGE);
      if (ctx.session.tasksPage >= totalPages && totalPages > 0) {
        ctx.session.tasksPage = 0; // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const tasksByType = this.groupTasksByType(tasks);
      const completed = tasks.filter(t => t.completed).length;
      const total = tasks.length;
      const percentage = Math.round((completed / total) * 100);
      
      let message = `üìÖ *–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n`;
      message += `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${completed}/${total} (${percentage}%)\n`;
      message += this.getProgressBar(percentage) + '\n\n';
      
      // –ó–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      if (tasksByType.easy.length > 0) {
        message += `üíö *–ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏:*\n`;
        message += this.formatTaskList(tasksByType.easy);
      }

      if (tasksByType.standard.length > 0) {
        message += `\nüíõ *–°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:*\n`;
        message += this.formatTaskList(tasksByType.standard);
      }

      // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
      const userLevel = ctx.state.user?.level || 1;
      const hardTasksCount = tasksByType.hard.length;
      const hardTasksExpected = userLevel >= 11 ? 8 : 0;

      if (hardTasksExpected > 0) {
        message += `\nüî¥ *–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ (${hardTasksCount}/${hardTasksExpected}):*\n`;

        if (hardTasksCount > 0) {
          message += this.formatTaskList(tasksByType.hard);
        }

        if (hardTasksCount === 0) {
          // –ö–æ–≥–¥–∞ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –∑–∞–¥–∞—á (–∫—Ä–æ–º–µ –º–µ—Ç–∞–∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
          message += `\nüí° _–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞—á—É "–°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å –µ—â—ë 5-10 —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫" –Ω–∏–∂–µ_ ‚¨áÔ∏è\n`;
          message += `_‚ö†Ô∏è –í–∞–∂–Ω–æ: –≤—ã–ø–æ–ª–Ω–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è!_\n`;
        } else if (hardTasksCount < hardTasksExpected) {
          // –ö–æ–≥–¥–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
          const needMore = hardTasksExpected - hardTasksCount;
          const taskWord = needMore === 1 ? '–∑–∞–¥–∞—á—É' : (needMore < 5 ? '–∑–∞–¥–∞—á–∏' : '–∑–∞–¥–∞—á');
          message += `\n‚ûï _–î–æ–±–∞–≤—å –µ—â—ë ${needMore} ${taskWord}_\n`;
        }
      }

      if (tasksByType.magic.length > 0) {
        message += `\n‚ú® *–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞:*\n`;
        message += this.formatTaskList(tasksByType.magic);
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ 0
      const page = ctx.session.tasksPage || 0;
      const keyboard = this.createTasksKeyboard(tasks, page);
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    } catch (error) {
      console.error('Error updating task message:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–ø–∏—á–Ω–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö 30 –∑–∞–¥–∞—á
  async sendEpicCompletion(ctx, stats, user) {
    const epicMessage = `
üéÜüéÜüéÜ *–ù–ï–í–ï–†–û–Ø–¢–ù–û!* üéÜüéÜüéÜ

*–¢–´ ${g(user, '–í–´–ü–û–õ–ù–ò–õ', '–í–´–ü–û–õ–ù–ò–õ–ê')} –í–°–ï –ó–ê–î–ê–ß–ò –î–ù–Ø!*

üèÜ *–¢–´ –õ–ï–ì–ï–ù–î–ê –î–ù–Ø!* üèÜ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

*–°–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ:*

1Ô∏è‚É£ –ü–æ–ª–æ–∂–∏ —Ä—É–∫—É –Ω–∞ —Å–µ—Ä–¥—Ü–µ
2Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–µ–±—è –≤ –∑–µ—Ä–∫–∞–ª–æ
3Ô∏è‚É£ –°–∫–∞–∂–∏ —Å–µ–±–µ –í–°–õ–£–•:

_"–Ø –ú–û–õ–û–î–ï–¶!_
_–Ø ${g(user, '–°–ü–†–ê–í–ò–õ–°–Ø', '–°–ü–†–ê–í–ò–õ–ê–°–¨')}!_
_–Ø ${g(user, '–î–û–°–¢–û–ò–ù', '–î–û–°–¢–û–ô–ù–ê')} –£–í–ê–ñ–ï–ù–ò–Ø!_
_–Ø –ë–õ–ê–ì–û–î–ê–†–Æ –°–ï–ë–Ø –ó–ê –≠–¢–û–¢ –î–ï–ù–¨!"_

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö° *–¢—ã ${g(user, '–≤–æ—à–µ–ª', '–≤–æ—à–ª–∞')} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–¢–û–ö–ê*
üß† *–¢–≤–æ–π –º–æ–∑–≥ –≤—ã—Ä–∞–±–æ—Ç–∞–ª –º–∞–∫—Å–∏–º—É–º –¥–æ—Ñ–∞–º–∏–Ω–∞*
üí™ *–¢—ã ${g(user, '–¥–æ–∫–∞–∑–∞–ª', '–¥–æ–∫–∞–∑–∞–ª–∞')}, —á—Ç–æ ${g(user, '—Å–ø–æ—Å–æ–±–µ–Ω', '—Å–ø–æ—Å–æ–±–Ω–∞')} –Ω–∞ –≤—Å—ë!*

‚ú® _–ü—Ä–æ—á—É–≤—Å—Ç–≤—É–π —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç..._
‚ú® _–≠—Ç–æ –¢–´ —ç—Ç–æ ${g(user, '—Å–¥–µ–ª–∞–ª', '—Å–¥–µ–ª–∞–ª–∞')}!_
‚ú® _–¢—ã - ${g(user, '–ì–ï–†–û–ô', '–ì–ï–†–û–ò–ù–Ø')} —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏!_

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

*–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è:*
üíö –ü—Ä–æ—Å—Ç—ã—Ö: ${stats.easy_completed}
üíõ –°—Ä–µ–¥–Ω–∏—Ö: ${stats.standard_completed} 
‚ù§Ô∏è –°–ª–æ–∂–Ω—ã—Ö: ${stats.hard_completed}
‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∞—è: ${stats.magic_completed ? '‚úÖ' : '‚ùå'}

üî• Flow Score: ${stats.flow_score || 100}%
‚ö° –ë–∞–ª–ª—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${stats.productivity_index || 0}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

*–ü–û–ó–î–†–ê–í–õ–Ø–Æ, ${g(user, '–ß–ï–ú–ü–ò–û–ù', '–ß–ï–ú–ü–ò–û–ù–ö–ê')}!* üéâ

_–¢–µ–ø–µ—Ä—å –∏–¥–∏ –∏ –æ—Ç–ø—Ä–∞–∑–¥–Ω—É–π —Å–≤–æ—é –ø–æ–±–µ–¥—É!_
_–¢—ã —ç—Ç–æ ${g(user, '–∑–∞—Å–ª—É–∂–∏–ª', '–∑–∞—Å–ª—É–∂–∏–ª–∞')}!_
    `.trim();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–ø–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply(epicMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'show_daily_stats' }
          ],
          [
            { text: 'üéØ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å', callback_data: 'complete_day' }
          ]
        ]
      }
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ GIF –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
      await ctx.replyWithSticker('CAACAgIAAxkBAAEBaUtmF1234567890ABCDEF'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —Å—Ç–∏–∫–µ—Ä–∞
    } catch (e) {
      // –ï—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      console.log('Sticker not found, continuing...');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
  checkAchievements(stats) {
    const achievements = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (stats.completed === 1) {
      achievements.push('üéØ –ü–µ—Ä–≤—ã–π —à–∞–≥!');
    }
    if (stats.completed === 10) {
      achievements.push('‚úÖ –†–∞–∑–º–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    }
    if (stats.completed === 20) {
      achievements.push('‚ö° –í –ø–æ—Ç–æ–∫–µ!');
    }
    if (stats.completed === 30) {
      achievements.push('üëë –õ–µ–≥–µ–Ω–¥–∞ –¥–Ω—è!');
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if (achievements.length > 0) {
      console.log('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:', achievements.join(', '));
    }
    
    return achievements;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á
  async showRefreshWarning(ctx) {
    try {
      const warningText = `üõë *–°–¢–û–ü! –ê —Ç—ã —É–≤–µ—Ä–µ–Ω?*

üß† *–ù–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç:* –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–º–µ–Ω–∞ –∑–∞–¥–∞—á —Ä–∞–∑—Ä—É—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞!

–ö–æ–≥–¥–∞ —Ç—ã —á–∞—Å—Ç–æ –º–µ–Ω—è–µ—à—å –∑–∞–¥–∞—á–∏, –º–æ–∑–≥:
‚ùå –¢–µ—Ä—è–µ—Ç —Ñ–æ–∫—É—Å –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é  
‚ùå –¢—Ä–∞—Ç–∏—Ç —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
‚ùå –ù–µ –≤—Ö–æ–¥–∏—Ç –≤ –≥–ª—É–±–æ–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞

üí° *–°–æ–≤–µ—Ç –∫–æ—É—á–∞:* –õ—É—á—à–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ, —á—Ç–æ –µ—Å—Ç—å ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∂—É—Ç—Å—è –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã–º–∏. –ò–º–µ–Ω–Ω–æ —Ç–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏–≤—ã—á–∫–∞ –∑–∞–≤–µ—Ä—à–∞—Ç—å –Ω–∞—á–∞—Ç–æ–µ!

‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

–í—Å–µ —Ä–∞–≤–Ω–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`;
      
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –î–∞, –æ–±–Ω–æ–≤–∏—Ç—å', 'refresh_tasks'),
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_refresh')
        ]
      ]);
      
      await ctx.editMessageText(warningText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    } catch (error) {
      console.error('Error showing refresh warning:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
  async showEditListMenu(ctx) {
    try {
      const menuText = `‚úèÔ∏è *–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
      
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'edit_task_menu'),
          Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å', 'edit_add_custom')
        ],
        [
          Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å', 'edit_delete_menu')
        ],
        [
          Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É', 'back_to_tasks')
        ]
      ]);
      
      await ctx.editMessageText(menuText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    } catch (error) {
      console.error('Error showing edit menu:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã
  async showReplaceTaskMenu(ctx, taskService, userId, page = 0) {
    try {
      const today = moment().tz('Europe/Moscow').format('YYYY-MM-DD');
      const tasks = await taskService.getUserTasksForDate(userId, today);
      const uncompletedTasks = tasks.filter(t => !t.completed);
      
      if (uncompletedTasks.length === 0) {
        await ctx.editMessageText('–ù–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–º–µ–Ω—ã!', {
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', 'edit_list_menu')]
          ]).reply_markup
        });
        return;
      }

      const TASKS_PER_PAGE = 10;
      const totalPages = Math.ceil(uncompletedTasks.length / TASKS_PER_PAGE);
      const startIndex = page * TASKS_PER_PAGE;
      const endIndex = startIndex + TASKS_PER_PAGE;
      const pageTasks = uncompletedTasks.slice(startIndex, endIndex);

      let message = `üîÑ *–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–º–µ–Ω—ã:*\n`;
      if (totalPages > 1) {
        message += `_–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}_\n\n`;
      } else {
        message += `\n`;
      }
      
      const keyboard = [];
      pageTasks.forEach(task => {
        const taskText = task.task_text.length > 30 
          ? task.task_text.substring(0, 30) + '...' 
          : task.task_text;
        keyboard.push([
          Markup.button.callback(
            `${this.getTaskTypeIcon(task.task_type)} ${taskText}`,
            `replace_task_${task.id}`
          )
        ]);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      if (totalPages > 1) {
        const paginationButtons = [];
        if (page > 0) {
          paginationButtons.push(Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'replace_page_prev'));
        }
        if (page < totalPages - 1) {
          paginationButtons.push(Markup.button.callback('–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è', 'replace_page_next'));
        }
        if (paginationButtons.length > 0) {
          keyboard.push(paginationButtons);
        }
      }
      
      keyboard.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', 'edit_list_menu')]);
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard(keyboard).reply_markup
      });
    } catch (error) {
      console.error('Error showing replace menu:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞—á');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
  getTaskTypeIcon(taskType) {
    switch (taskType) {
      case 'easy': return 'üíö';
      case 'standard': return 'üíõ';
      case 'hard': return '‚ù§Ô∏è';
      case 'magic': return '‚ú®';
      default: return 'üìã';
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
  async showTaskCreationModeSelection(ctx, user, editMessage = false) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º user.level –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞ –¥–Ω—è
      const currentDay = user.level || 1;

      let progressText;
      if (currentDay <= 15) {
        progressText = `–î–µ–Ω—å ${currentDay} –∏–∑ 15`;
      } else {
        progressText = `–î–µ–Ω—å ${currentDay} (—Ç—ã –≤ –ø–æ—Ç–æ–∫–µ! üéâ)`;
      }

      const modeText = `üéØ *–ö–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?*

${progressText}`;

      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚ú® –°–æ–∑–¥–∞–π –¥–ª—è –º–µ–Ω—è', 'mode_ai_generate'),
          Markup.button.callback(`‚úèÔ∏è ${g(user, '–°–∞–º', '–°–∞–º–∞')} —Å–æ—Å—Ç–∞–≤–ª—é`, 'mode_manual_create')
        ]
      ]);
      
      if (editMessage) {
        await ctx.editMessageText(modeText, {
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        });
      } else {
        await ctx.replyWithMarkdown(modeText, keyboard);
      }
    } catch (error) {
      console.error('Error showing mode selection:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  async showBulkEditMenu(ctx) {
    try {
      const menuText = `üîÑ *–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
      
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ', 'bulk_complete_all'),
          Markup.button.callback('‚¨ú –°–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫–∏', 'bulk_uncomplete_all')
        ],
        [
          Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', 'bulk_delete_completed'),
          Markup.button.callback('üîÑ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å', 'bulk_shuffle_tasks')
        ],
        [
          Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', 'edit_list_menu')
        ]
      ]);
      
      await ctx.editMessageText(menuText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    } catch (error) {
      console.error('Error showing bulk edit menu:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
  async showRenameTaskMenu(ctx, taskService, userId) {
    try {
      const today = moment().tz('Europe/Moscow').format('YYYY-MM-DD');
      const tasks = await taskService.getUserTasksForDate(userId, today);
      
      if (tasks.length === 0) {
        await ctx.editMessageText('–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è!', {
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', 'edit_list_menu')]
          ]).reply_markup
        });
        return;
      }

      let message = `üìù *–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:*\n\n`;
      
      const keyboard = [];
      tasks.slice(0, 10).forEach(task => {
        const taskText = task.task_text.length > 30 
          ? task.task_text.substring(0, 30) + '...' 
          : task.task_text;
        const status = task.completed ? '‚úÖ' : '‚¨ú';
        keyboard.push([
          Markup.button.callback(
            `${status} ${this.getTaskTypeIcon(task.task_type)} ${taskText}`,
            `rename_task_${task.id}`
          )
        ]);
      });
      
      keyboard.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', 'edit_list_menu')]);
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard(keyboard).reply_markup
      });
    } catch (error) {
      console.error('Error showing rename menu:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á
  async showChangeTypeMenu(ctx, taskService, userId) {
    try {
      const today = moment().tz('Europe/Moscow').format('YYYY-MM-DD');
      const tasks = await taskService.getUserTasksForDate(userId, today);
      
      if (tasks.length === 0) {
        await ctx.editMessageText('–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞!', {
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', 'edit_list_menu')]
          ]).reply_markup
        });
        return;
      }

      let message = `üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞:*\n\n`;
      
      const keyboard = [];
      tasks.slice(0, 10).forEach(task => {
        const taskText = task.task_text.length > 30 
          ? task.task_text.substring(0, 30) + '...' 
          : task.task_text;
        const status = task.completed ? '‚úÖ' : '‚¨ú';
        keyboard.push([
          Markup.button.callback(
            `${status} ${this.getTaskTypeIcon(task.task_type)} ${taskText}`,
            `change_type_${task.id}`
          )
        ]);
      });
      
      keyboard.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', 'edit_list_menu')]);
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard(keyboard).reply_markup
      });
    } catch (error) {
      console.error('Error showing change type menu:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
  async showTypeSelectionMenu(ctx, taskId) {
    try {
      const menuText = `üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏:*`;
      
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('üíö –ü—Ä–æ—Å—Ç–∞—è', `set_type_${taskId}_easy`),
          Markup.button.callback('üíõ –°—Ä–µ–¥–Ω—è—è', `set_type_${taskId}_standard`)
        ],
        [
          Markup.button.callback('‚ù§Ô∏è –°–ª–æ–∂–Ω–∞—è', `set_type_${taskId}_hard`),
          Markup.button.callback('‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∞—è', `set_type_${taskId}_magic`)
        ],
        [
          Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'edit_type_menu')
        ]
      ]);
      
      await ctx.editMessageText(menuText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    } catch (error) {
      console.error('Error showing type selection menu:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  async showBulkConfirmation(ctx, action, actionText) {
    try {
      const warningText = `‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è*

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${actionText}?

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`;
      
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –î–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å', `confirm_${action}`),
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'edit_bulk_menu')
        ]
      ]);
      
      await ctx.editMessageText(warningText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
    } catch (error) {
      console.error('Error showing bulk confirmation:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
  async showDeleteTaskMenu(ctx, taskService, userId) {
    try {
      const today = moment().tz('Europe/Moscow').format('YYYY-MM-DD');
      const tasks = await taskService.getUserTasksForDate(userId, today);
      
      if (tasks.length === 0) {
        await ctx.editMessageText('–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!', {
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', 'edit_list_menu')]
          ]).reply_markup
        });
        return;
      }

      let message = `‚ùå *–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n`;
      
      const keyboard = [];
      tasks.slice(0, 10).forEach(task => {
        const taskText = task.task_text.length > 30 
          ? task.task_text.substring(0, 30) + '...' 
          : task.task_text;
        const status = task.completed ? '‚úÖ' : '‚¨ú';
        keyboard.push([
          Markup.button.callback(
            `${status} ${this.getTaskTypeIcon(task.task_type)} ${taskText}`,
            `delete_task_${task.id}`
          )
        ]);
      });
      
      keyboard.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', 'edit_list_menu')]);
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard(keyboard).reply_markup
      });
    } catch (error) {
      console.error('Error showing delete menu:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    }
  }
}

module.exports = {
  TaskHandler,
  taskHandler: null // –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ bot/index.js
};

// src/handlers/feedbackHandler.js
const { Markup } = require('telegraf');
const { sendOrEditMessage } = require('../utils/messageUtils');
const { EventLogger, EVENT_TYPES } = require('../services/eventLogger');

class FeedbackHandler {
  constructor(feedbackService) {
    this.feedbackService = feedbackService;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–∑—ã–≤–∞
  async showFeedbackMenu(ctx) {
    try {
      const message = `üí¨ *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*

–ú—ã —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ!

–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å?`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ', 'feedback_bug')],
        [Markup.button.callback('üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ', 'feedback_suggestion')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'show_main_menu')]
      ]);

      await sendOrEditMessage(ctx, message, keyboard);

      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }
    } catch (error) {
      console.error('Error showing feedback menu:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
    }
  }

  // –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  async startBugReport(ctx) {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
      if (!ctx.session) {
        ctx.session = {};
      }
      ctx.session.awaitingFeedback = { type: 'bug' };

      const message = `üêõ *–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ*

–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è.

–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —É–∫–∞–∑–∞—Ç—å:
‚Ä¢ –ß—Ç–æ —Ç—ã –¥–µ–ª–∞–ª
‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
‚Ä¢ –ß—Ç–æ —Ç—ã –æ–∂–∏–¥–∞–ª —É–≤–∏–¥–µ—Ç—å

–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_feedback')]
        ]).reply_markup
      });

      await ctx.answerCbQuery();
    } catch (error) {
      console.error('Error starting bug report:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
    }
  }

  // –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è
  async startSuggestion(ctx) {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
      if (!ctx.session) {
        ctx.session = {};
      }
      ctx.session.awaitingFeedback = { type: 'suggestion' };

      const message = `üí° *–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ*

–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —É–ª—É—á—à–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–æ—Ç.

–õ—é–±—ã–µ –∏–¥–µ–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è! üôå

–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_feedback')]
        ]).reply_markup
      });

      await ctx.answerCbQuery();
    } catch (error) {
      console.error('Error starting suggestion:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º
  async handleFeedbackMessage(ctx, feedbackService, userService) {
    try {
      const message = ctx.message.text;
      const type = ctx.session.awaitingFeedback.type;
      const telegram_id = ctx.from.id;

      console.log(`üí¨ Processing feedback from user ${telegram_id}, type: ${type}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –ë–î
      const savedFeedback = await feedbackService.saveFeedback(telegram_id, type, message);
      console.log(`‚úÖ Feedback saved with ID: ${savedFeedback.id}`);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const userData = await userService.getUserByTelegramId(telegram_id);

      if (!userData) {
        console.warn(`‚ö†Ô∏è User data not found for telegram_id ${telegram_id}, sending minimal notification`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–¥–∞–∂–µ –µ—Å–ª–∏ userData === null)
      await feedbackService.notifyAdmin(savedFeedback, userData || {
        telegram_id,
        username: null,
        level: 'N/A'
      });
      console.log(`‚úÖ Admin notified about feedback #${savedFeedback.id}`);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      delete ctx.session.awaitingFeedback;

      // –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const responseMessage = type === 'bug'
        ? `‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ!*

–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –∏ –∏—Å–ø—Ä–∞–≤–∏–º –ø—Ä–æ–±–ª–µ–º—É.`
        : `‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!*

–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—é –∏–¥–µ—é –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ—ë.`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'show_main_menu')],
        [Markup.button.callback('üí¨ –ï—â—ë –æ—Ç–∑—ã–≤', 'show_feedback')]
      ]);

      await ctx.reply(responseMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });

    } catch (error) {
      console.error('‚ùå Error handling feedback message:', error);
      console.error('Error stack:', error.stack);

      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.\n\n' +
        '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        { parse_mode: 'Markdown' }
      );
    }
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
  async cancelFeedback(ctx) {
    try {
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (ctx.session && ctx.session.awaitingFeedback) {
        delete ctx.session.awaitingFeedback;
      }

      await this.showFeedbackMenu(ctx);
    } catch (error) {
      console.error('Error canceling feedback:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
    }
  }

  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  // RETENTION FEEDBACK PROMPTS (Day 1, 3, 7)
  // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å retention feedback –¥–ª—è Day 1
   */
  async showDay1Feedback(ctx) {
    try {
      const message = `–ö–∞–∫ —Ç–µ–±–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å FlowBot? üåü`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üî• –ö—Ä—É—Ç–æ, —É–∂–µ —á—É–≤—Å—Ç–≤—É—é —ç—Ñ—Ñ–µ–∫—Ç!', 'retention_fb_1_great')],
        [Markup.button.callback('üëç –ù–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ–∫–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ', 'retention_fb_1_unclear')],
        [Markup.button.callback('üòê –ó–∞–¥–∞—á–∏ –Ω–µ –ø–æ–¥–æ—à–ª–∏', 'retention_fb_1_not_fit')],
        [Markup.button.callback('‚ùå –ù–µ –¥–ª—è –º–µ–Ω—è', 'retention_fb_1_not_for_me')]
      ]);

      await ctx.reply(message, keyboard);
    } catch (error) {
      console.error('Error showing Day 1 feedback:', error);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å retention feedback –¥–ª—è Day 3
   */
  async showDay3Feedback(ctx) {
    try {
      const message = `3 –¥–Ω—è —Å FlowBot - –∫–∞–∫ –∏–¥—ë—Ç? üí™`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –í—Ö–æ–∂—É –≤ —Ä–∏—Ç–º!', 'retention_fb_3_getting_rhythm')],
        [Markup.button.callback('ü§î –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã', 'retention_fb_3_have_questions')],
        [Markup.button.callback('üòì –°–ª–æ–∂–Ω–æ–≤–∞—Ç–æ', 'retention_fb_3_too_hard')],
        [Markup.button.callback('‚ùå –•–æ—á—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è', 'retention_fb_3_want_stop')]
      ]);

      await ctx.reply(message, keyboard);
    } catch (error) {
      console.error('Error showing Day 3 feedback:', error);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å retention feedback –¥–ª—è Day 7
   */
  async showDay7Feedback(ctx) {
    try {
      const message = `–ù–µ–¥–µ–ª—è –ø–æ–∑–∞–¥–∏! –ß—Ç–æ –¥—É–º–∞–µ—à—å? üéØ`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞—é, —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!', 'retention_fb_7_works')],
        [Markup.button.callback('üìà –í–∏–∂—É –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ', 'retention_fb_7_slow_progress')],
        [Markup.button.callback('üòê –ù–µ —É–≤–µ—Ä–µ–Ω –ø–æ–∫–∞', 'retention_fb_7_not_sure')],
        [Markup.button.callback('‚ùå –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å', 'retention_fb_7_stopping')]
      ]);

      await ctx.reply(message, keyboard);
    } catch (error) {
      console.error('Error showing Day 7 feedback:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ retention feedback
   * @param {number} dayNumber - –î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º—ã (1, 3, 7)
   * @param {string} feedbackType - –¢–∏–ø –æ—Ç–∑—ã–≤–∞ (great, unclear –∏ —Ç.–¥.)
   */
  async handleRetentionFeedback(ctx, dayNumber, feedbackType) {
    try {
      const telegram_id = ctx.from.id;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      await this.feedbackService.saveRetentionFeedback(telegram_id, dayNumber, feedbackType);
      console.log(`‚úÖ Retention feedback saved: Day ${dayNumber}, type ${feedbackType}`);

      // Log FEEDBACK_SUBMITTED event
      const eventLogger = new EventLogger(this.feedbackService.supabase);
      await eventLogger.logFeedbackSubmitted(telegram_id, dayNumber, feedbackType);

      // –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let responseMessage = '';

      // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π feedback
      if (['great', 'getting_rhythm', 'works'].includes(feedbackType)) {
        responseMessage = `‚úÖ *–û—Ç–ª–∏—á–Ω–æ!* üéâ\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`;
      }
      // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π feedback
      else if (['unclear', 'have_questions', 'not_sure', 'slow_progress'].includes(feedbackType)) {
        responseMessage = `‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!* üìù\n\n–ú—ã —É—á—Ç—ë–º —Ç–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –±—É–¥–µ–º —É–ª—É—á—à–∞—Ç—å –±–æ—Ç–∞.\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –∏—Å–ø–æ–ª—å–∑—É–π /feedback –¥–ª—è —Å–≤—è–∑–∏! üí¨`;
      }
      // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π feedback
      else if (['not_fit', 'not_for_me', 'too_hard', 'want_stop', 'stopping'].includes(feedbackType)) {
        responseMessage = `üòî *–ñ–∞–ª—å, —á—Ç–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ...*\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –¢–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è - —è –±—É–¥—É —Ç—É—Ç! ü§ó`;
      }
      else {
        responseMessage = `‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!* üôè`;
      }

      await ctx.editMessageText(responseMessage, {
        parse_mode: 'Markdown',
        reply_markup: undefined
      });

      await ctx.answerCbQuery('–°–ø–∞—Å–∏–±–æ! üôè');

    } catch (error) {
      console.error('Error handling retention feedback:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
    }
  }
}

module.exports = { FeedbackHandler };

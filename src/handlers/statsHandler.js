// src/handlers/statsHandler.js
const { Markup } = require('telegraf');
const moment = require('moment-timezone');
const { sendOrEditMessage } = require('../utils/messageUtils');

class StatsHandler {
  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  async showStats(ctx, user, userService, taskService) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const stats = await userService.getUserStats(user.telegram_id);
      const todayStats = await taskService.getDailyStats(user.telegram_id);
      
      if (!stats) {
        await sendOrEditMessage(ctx, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
      let message = `üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n`;
      
      // –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      message += `*üìÖ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n`;
      if (user.level <= 30) {
        message += `–î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${user.level}/30\n`;
      } else {
        message += `–î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${user.level} (–∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ)\n`;
      }
      message += `–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${stats.totalTasks}\n`;
      message += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: ${stats.totalDays}\n`;
      message += `–°—Ä–µ–¥–Ω–µ–µ –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å: ${stats.averageTasks}\n`;
      message += `–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stats.completionRate}%\n\n`;
      
      // –°—Ç—Ä–∏–∫–∏
      message += `*üî• –°—Ç—Ä–∏–∫–∏:*\n`;
      message += `–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: ${stats.currentStreak} –¥–Ω–µ–π\n`;
      message += `–õ—É—á—à–∏–π —Å—Ç—Ä–∏–∫: ${stats.longestStreak} –¥–Ω–µ–π\n\n`;
      
      // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
      message += `*üìÜ –°–µ–≥–æ–¥–Ω—è:*\n`;
      message += `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${todayStats.completed_tasks}/${todayStats.total_tasks}\n`;
      message += `Flow Score: ${todayStats.flow_score}%\n`;
      
      if (todayStats.easy_completed > 0) {
        message += `üíö –ü—Ä–æ—Å—Ç—ã—Ö: ${todayStats.easy_completed}\n`;
      }
      if (todayStats.standard_completed > 0) {
        message += `üíõ –°—Ä–µ–¥–Ω–∏—Ö: ${todayStats.standard_completed}\n`;
      }
      if (todayStats.hard_completed > 0) {
        message += `‚ù§Ô∏è –°–ª–æ–∂–Ω—ã—Ö: ${todayStats.hard_completed}\n`;
      }
      if (todayStats.magic_completed) {
        message += `‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∞—è: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n`;
      }
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (stats.achievements && stats.achievements.length > 0) {
        message += `\n*üèÜ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n`;
        const recentAchievements = stats.achievements.slice(-3);
        for (const ach of recentAchievements) {
          message += `${ach.achievements.icon} ${ach.achievements.name}\n`;
        }
      }

      // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é', 'stats_weekly'),
          Markup.button.callback('üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü', 'stats_monthly')
        ],
        [
          Markup.button.callback('üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'stats_achievements')
        ],
        [
          Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_menu')
        ]
      ]);

      await sendOrEditMessage(ctx, message, keyboard);
    } catch (error) {
      console.error('Error in showStats:', error);
      await sendOrEditMessage(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è emoji-–≥—Ä–∞—Ñ–∏–∫–∞
  generateEmojiBar(value, max, width = 10) {
    if (max === 0) return '‚¨ú'.repeat(width);
    const filled = Math.round((value / max) * width);
    return 'üü©'.repeat(filled) + '‚¨ú'.repeat(width - filled);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
  async showDetailedStats(ctx, period) {
    try {
      const user = ctx.state.user;
      const userService = ctx.state.userService;

      const stats = await userService.getUserStats(user.id);

      if (!stats || !stats.recentDays) {
        await ctx.answerCbQuery('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
      }

      let message = '';
      let days = [];

      if (period === 'weekly') {
        message = `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é*\n\n`;
        days = stats.recentDays.slice(0, 7);

        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º—É–º –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        const maxTasks = Math.max(...days.map(d => d.completed_tasks || 0));

        // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –¥–µ–Ω—å
        const bestDay = days.reduce((best, d) =>
          (d.completed_tasks || 0) > (best.completed_tasks || 0) ? d : best
        );

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ –¥–Ω—è–º
        for (const day of days) {
          const completed = day.completed_tasks || 0;
          const dayName = moment(day.date).format('dd');
          const dayNum = moment(day.date).format('DD');
          const bar = this.generateEmojiBar(completed, maxTasks, 10);
          const isBest = day === bestDay ? ' ‚≠ê' : '';

          message += `${dayName} ${dayNum}  ${bar}  ${completed}${isBest}\n`;
        }

        message += `\n`;

      } else if (period === 'monthly') {
        message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü*\n\n`;
        days = stats.monthlyStats || stats.recentDays.slice(0, 30);
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É
      const totalCompleted = days.reduce((sum, d) => sum + (d.completed_tasks || 0), 0);
      const avgCompleted = Math.round(totalCompleted / days.length);
      const bestDay = days.reduce((best, d) =>
        (d.completed_tasks || 0) > (best.completed_tasks || 0) ? d : best
      );

      message += `üí™ –í—Å–µ–≥–æ: ${totalCompleted} –∑–∞–¥–∞—á\n`;
      message += `üî• –°—Ä–µ–¥–Ω–µ–µ: ${avgCompleted}/–¥–µ–Ω—å\n`;
      message += `üèÜ –õ—É—á—à–∏–π –¥–µ–Ω—å: ${moment(bestDay.date).format('DD.MM')} (${bestDay.completed_tasks})\n`;

      // –î–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏
      if (period === 'monthly') {
        const activeDays = days.filter(d => (d.completed_tasks || 0) > 0).length;
        message += `üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: ${activeDays}/${days.length}\n`;
      }

      // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
      const easyTotal = days.reduce((sum, d) => sum + (d.easy_completed || 0), 0);
      const standardTotal = days.reduce((sum, d) => sum + (d.standard_completed || 0), 0);
      const hardTotal = days.reduce((sum, d) => sum + (d.hard_completed || 0), 0);

      if (easyTotal + standardTotal + hardTotal > 0) {
        message += `\n*–ü–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á:*\n`;
        message += `üíö –ü—Ä–æ—Å—Ç—ã—Ö: ${easyTotal}\n`;
        message += `üíõ –°—Ä–µ–¥–Ω–∏—Ö: ${standardTotal}\n`;
        message += `‚ù§Ô∏è –°–ª–æ–∂–Ω—ã—Ö: ${hardTotal}\n`;
      }

      // –î–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ–¥–µ–ª—è–º
      if (period === 'monthly' && days.length >= 7) {
        message += `\n*–ü–æ –Ω–µ–¥–µ–ª—è–º:*\n`;

        for (let i = 0; i < Math.ceil(days.length / 7); i++) {
          const weekDays = days.slice(i * 7, (i + 1) * 7);
          const weekTotal = weekDays.reduce((sum, d) => sum + (d.completed_tasks || 0), 0);
          message += `–ù–µ–¥–µ–ª—è ${i + 1}:  ${weekTotal} –∑–∞–¥–∞—á\n`;
        }
      }

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', 'show_stats')]
      ]);

      await sendOrEditMessage(ctx, message, keyboard);
    } catch (error) {
      console.error('Error in showDetailedStats:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
  async saveMood(ctx, mood) {
    try {
      const user = ctx.state.user;
      const taskService = ctx.state.taskService;
      
      const today = moment().tz('Europe/Moscow').format('YYYY-MM-DD');
      await taskService.saveMood(user.id, today, mood);
      
      await ctx.answerCbQuery('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
      
      // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
      let response = '';
      switch(mood) {
        case 'great':
          response = 'üòä –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ —É —Ç–µ–±—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å!';
          break;
        case 'good':
          response = 'üëç –•–æ—Ä–æ—à–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!';
          break;
        case 'normal':
          response = 'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ - —Ç–æ–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ!';
          break;
        case 'tired':
          response = 'üòî –£—Å—Ç–∞–ª? –û—Ç–¥–æ—Ö–Ω–∏ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ. –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å!';
          break;
      }
      
      response += '\n\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ?';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é', 'add_reflection')],
        [Markup.button.callback('‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_reflection')]
      ]);
      
      await sendOrEditMessage(ctx, response, keyboard);
    } catch (error) {
      console.error('Error saving mood:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  async showAchievements(ctx) {
    try {
      const user = ctx.state.user;
      const userService = ctx.state.userService;
      
      const stats = await userService.getUserStats(user.id);
      
      if (!stats || !stats.achievements) {
        await ctx.answerCbQuery('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
        return;
      }

      let message = `üèÜ *–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n`;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const streakAchievements = [];
      const taskAchievements = [];
      const specialAchievements = [];
      
      for (const ach of stats.achievements) {
        const achievement = ach.achievements;
        const achText = `${achievement.icon} *${achievement.name}*\n_${achievement.description}_\n+${achievement.points} –æ—á–∫–æ–≤\n\n`;
        
        if (achievement.code.startsWith('streak_')) {
          streakAchievements.push(achText);
        } else if (achievement.code.startsWith('task_')) {
          taskAchievements.push(achText);
        } else {
          specialAchievements.push(achText);
        }
      }
      
      if (streakAchievements.length > 0) {
        message += `*üî• –°—Ç—Ä–∏–∫–∏:*\n${streakAchievements.join('')}`;
      }
      
      if (taskAchievements.length > 0) {
        message += `*‚úÖ –ó–∞–¥–∞—á–∏:*\n${taskAchievements.join('')}`;
      }
      
      if (specialAchievements.length > 0) {
        message += `*‚ú® –û—Å–æ–±—ã–µ:*\n${specialAchievements.join('')}`;
      }
      
      // –û–±—â–∏–µ –æ—á–∫–∏
      const totalPoints = stats.achievements.reduce(
        (sum, ach) => sum + (ach.achievements.points || 0), 0
      );
      message += `\n*–í—Å–µ–≥–æ –æ—á–∫–æ–≤: ${totalPoints}* üéØ`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', 'show_stats')]
      ]);
      
      await sendOrEditMessage(ctx, message, keyboard);
    } catch (error) {
      console.error('Error showing achievements:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
  async generateReport(ctx, user) {
    try {
      const userService = ctx.state.userService;
      const stats = await userService.getUserStats(user.id);
      
      if (!stats) {
        await sendOrEditMessage(ctx, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.');
        return;
      }

      let report = `üìã *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç FlowBot*\n`;
      report += `_${moment().format('DD.MM.YYYY')}_\n\n`;
      
      report += `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.first_name}\n`;
      if (user.level <= 30) {
        report += `üìÖ *–î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º—ã:* ${user.level}/30\n`;
      } else {
        report += `üìÖ *–î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º—ã:* ${user.level} (–∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ)\n`;
      }
      
      report += `*üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
      report += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.totalTasks}\n`;
      report += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: ${stats.totalDays}\n`;
      report += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å: ${stats.averageTasks}\n`;
      report += `‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stats.completionRate}%\n`;
      report += `‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: ${stats.currentStreak} –¥–Ω–µ–π\n`;
      report += `‚Ä¢ –õ—É—á—à–∏–π —Å—Ç—Ä–∏–∫: ${stats.longestStreak} –¥–Ω–µ–π\n\n`;
      
      // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      let analysis = `*üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:*\n`;
      
      if (stats.completionRate >= 80) {
        analysis += `‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –¢—ã –≤ —Ç–æ–ø-20% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n`;
      } else if (stats.completionRate >= 60) {
        analysis += `üëç –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!\n`;
      } else {
        analysis += `üìà –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∏–Ω–∞—Ç—å —Å –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á.\n`;
      }
      
      if (stats.currentStreak >= 7) {
        analysis += `üî• –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π —Å—Ç—Ä–∏–∫! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.\n`;
      } else if (stats.currentStreak >= 3) {
        analysis += `üí™ –•–æ—Ä–æ—à–∏–π —Å—Ç—Ä–∏–∫. –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è!\n`;
      } else {
        analysis += `üéØ –†–∞–±–æ—Ç–∞–π –Ω–∞–¥ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å—é - —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É.\n`;
      }
      
      report += analysis + '\n';
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      report += `*üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`;
      
      if (stats.averageTasks < 15) {
        report += `‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–∏–Ω–∏–º—É–º 15 –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å\n`;
      }
      if (stats.completionRate < 70) {
        report += `‚Ä¢ –ù–∞—á–∏–Ω–∞–π –¥–µ–Ω—å —Å 5 —Å–∞–º—ã—Ö –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–∞–∑–≥–æ–Ω–∞\n`;
      }
      if (stats.currentStreak < 3) {
        report += `‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏\n`;
      }
      
      report += `\n_–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å FlowBot!_ üöÄ`;

      await sendOrEditMessage(ctx, report);
    } catch (error) {
      console.error('Error generating report:', error);
      await sendOrEditMessage(ctx, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.');
    }
  }
}

module.exports = {
  statsHandler: new StatsHandler()
};

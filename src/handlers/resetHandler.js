// src/handlers/resetHandler.js
const { Markup } = require('telegraf');
const { sendOrEditMessage } = require('../utils/messageUtils');

const resetHandler = async (ctx) => {
  const confirmText = `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*
  
–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç –≤–µ—Å—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:
- –î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ 1
- –°—Ç—Ä–∏–∫ –æ–±–Ω—É–ª–∏—Ç—Å—è
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—Å–∏—Ç—Å—è

–¢—ã —É–≤–µ—Ä–µ–Ω?`;

  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'confirm_reset'),
      Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_reset')
    ]
  ]);

  await sendOrEditMessage(ctx, confirmText, keyboard);
};

const confirmReset = async (ctx, userService, statsService) => {
  try {
    const userId = ctx.from.id;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await userService.updateUser(userId, {
      level: 1,
      onboarding_completed: false
    });
    
    // –£–¥–∞–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await statsService.clearUserTasks(userId);
    
    await ctx.answerCbQuery('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω');
    
    const resetText = `üîÑ *–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!*
    
–¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –∑–∞–Ω–æ–≤–æ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.
–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.

üí™ –£–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!`;
    
    await sendOrEditMessage(ctx, resetText);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ
    const startHandler = require('./startHandler');
    await startHandler.startHandler(ctx, userService);
    
  } catch (error) {
    console.error('Error in confirmReset:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ', true);
  }
};

const cancelReset = async (ctx) => {
  await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
  await sendOrEditMessage(ctx, '‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');
};

module.exports = {
  resetHandler,
  confirmReset,
  cancelReset
};

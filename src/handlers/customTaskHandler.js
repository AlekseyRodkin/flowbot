// src/handlers/customTaskHandler.js
const { Markup } = require('telegraf');
const { sendOrEditMessage } = require('../utils/messageUtils');

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const getEstimatedTime = (difficulty) => {
  switch (difficulty) {
    case 'easy': return 10;
    case 'standard': return 20;
    case 'hard': return 45;
    case 'magic': return 60;
    default: return 15;
  }
};

const getDifficultyIcon = (difficulty) => {
  switch (difficulty) {
    case 'easy': return 'üíö';
    case 'standard': return 'üìà';
    case 'hard': return 'üî•';
    case 'magic': return '‚ú®';
    default: return 'üìà';
  }
};

const getDifficultyLabel = (difficulty) => {
  switch (difficulty) {
    case 'easy': return '–ü—Ä–æ—Å—Ç–∞—è';
    case 'standard': return '–°—Ä–µ–¥–Ω—è—è';
    case 'hard': return '–°–ª–æ–∂–Ω–∞—è';
    case 'magic': return '–í–æ–ª—à–µ–±–Ω–∞—è';
    default: return '–°—Ä–µ–¥–Ω—è—è';
  }
};

const getCategoryIcon = (category) => {
  switch (category) {
    case 'mental': return 'üß†';
    case 'physical': return 'üí™';
    case 'creative': return 'üé®';
    case 'social': return 'üë•';
    case 'household': return 'üè†';
    case 'personal': return '‚≠ê';
    default: return 'üìù';
  }
};

const getCategoryLabel = (category) => {
  switch (category) {
    case 'mental': return '–£–º—Å—Ç–≤–µ–Ω–Ω–∞—è';
    case 'physical': return '–§–∏–∑–∏—á–µ—Å–∫–∞—è';
    case 'creative': return '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è';
    case 'social': return '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è';
    case 'household': return '–î–æ–º–∞—à–Ω—è—è';
    case 'personal': return '–õ–∏—á–Ω–∞—è';
    default: return '–û–±—â–∞—è';
  }
};

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
const showCustomTasksMenu = async (ctx, taskService) => {
  try {
    const telegramId = ctx.from.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á
    const stats = await taskService.getCustomTasksStats(telegramId);
    
    const menuText = `üìö *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–æ–∏—Ö –∑–∞–¥–∞—á*\n\n–í –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ ${stats.active} –∑–∞–¥–∞—á:\n\nüíö –ü—Ä–æ—Å—Ç—ã–µ: ${stats.byDifficulty.easy || 0}\nüìà –°—Ä–µ–¥–Ω–∏–µ: ${stats.byDifficulty.standard}\nüî• –°–ª–æ–∂–Ω—ã–µ: ${stats.byDifficulty.hard}\n‚ú® –í–æ–ª—à–µ–±–Ω—ã–µ: ${stats.byDifficulty.magic}\n\n–ó–∞–¥–∞—á–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', 'custom_task_create')],
      [Markup.button.callback('üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'show_tasks')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'custom_task_stats')],
      [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
    ]);
    
    await sendOrEditMessage(ctx, menuText, keyboard);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in showCustomTasksMenu:', error);
    const errorText = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –∑–∞–¥–∞—á.';
    await sendOrEditMessage(ctx, errorText);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
  }
};

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ - –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const showCreateTaskDifficulty = async (ctx) => {
  try {
    const difficultyText = `*–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n\n_üîí –í—Å–µ –∑–∞–¥–∞—á–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —É —Ç–µ–±—è –∏ –Ω–∏–∫—É–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è_`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üíö –ü—Ä–æ—Å—Ç–∞—è (5-10 –º–∏–Ω)', 'create_task_easy')],
      [Markup.button.callback('üíõ –°—Ä–µ–¥–Ω—è—è (15-30 –º–∏–Ω)', 'create_task_standard')],
      [Markup.button.callback('‚ù§Ô∏è –°–ª–æ–∂–Ω–∞—è (30-60 –º–∏–Ω)', 'create_task_hard')],
      [Markup.button.callback('‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∞—è (60+ –º–∏–Ω)', 'create_task_magic')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'custom_tasks_menu')]
    ]);

    await sendOrEditMessage(ctx, difficultyText, keyboard);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in showCreateTaskDifficulty:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
  }
};

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const showCreateTaskCategory = async (ctx, difficulty) => {
  try {
    // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞—á–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await startTaskCreation(ctx, 'personal', difficulty);
  } catch (error) {
    console.error('Error in showCreateTaskCategory:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
  }
};

// –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
const startTaskCreation = async (ctx, category, difficulty) => {
  try {
    const difficultyLabels = {
      'easy': 'üíö –ü—Ä–æ—Å—Ç–∞—è',
      'standard': 'üìà –°—Ä–µ–¥–Ω—è—è',
      'hard': 'üî• –°–ª–æ–∂–Ω–∞—è',
      'magic': '‚ú® –í–æ–ª—à–µ–±–Ω–∞—è'
    };
    
    const taskExamples = {
      'easy': [
        "–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã",
        "–°–¥–µ–ª–∞—Ç—å 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", 
        "–ù–∞–ø–∏—Å–∞—Ç—å –°–ú–° –¥—Ä—É–≥—É"
      ],
      'standard': [
        "–ü—Ä–æ—á–∏—Ç–∞—Ç—å 20 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏",
        "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫",
        "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—á–∏–µ –ø–∏—Å—å–º–∞"
      ],
      'hard': [
        "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
        "–ü—Ä–æ–≤–µ—Å—Ç–∏ —É–±–æ—Ä–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ",
        "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É –∫—É—Ä—Å–∞"
      ],
      'magic': [
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü",
        "–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞",
        "–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é –≤ –±–ª–æ–≥"
      ]
    };
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!ctx.session) ctx.session = {};
    ctx.session.creatingTask = {
      category: 'personal',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ª–∏—á–Ω–∞—è" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      difficulty,
      step: 'waiting_title'
    };
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const examples = taskExamples[difficulty];
    if (!examples || examples.length === 0) {
      console.error('No examples found for difficulty:', difficulty);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤');
      return;
    }
    const randomExample = examples[Math.floor(Math.random() * examples.length)];
    
    const promptText = `*–°–æ–∑–¥–∞–Ω–∏–µ ${difficultyLabels[difficulty].toLowerCase()} –∑–∞–¥–∞—á–∏*\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n_–ü—Ä–∏–º–µ—Ä: "${randomExample}"_`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'custom_tasks_menu')]
    ]);
    
    await sendOrEditMessage(ctx, promptText, keyboard);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error in startTaskCreation:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
  }
};

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
const handleTaskTitle = async (ctx, customTaskService) => {
  try {
    if (!ctx.session?.creatingTask || ctx.session.creatingTask.step !== 'waiting_title') {
      return;
    }
    
    const title = ctx.message.text.trim();
    
    if (title.length < 3) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendOrEditMessage –≤–º–µ—Å—Ç–æ reply –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const errorText = '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:';
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'custom_tasks_menu')]
      ]);
      await sendOrEditMessage(ctx, errorText, keyboard);
      return;
    }
    
    if (title.length > 100) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendOrEditMessage –≤–º–µ—Å—Ç–æ reply –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const errorText = '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:';
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'custom_tasks_menu')]
      ]);
      await sendOrEditMessage(ctx, errorText, keyboard);
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    ctx.session.creatingTask.title = title;
    
    // –î–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –∫—Ä–æ–º–µ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    const difficulty = ctx.session.creatingTask.difficulty;
    if (difficulty !== 'hard') {
      // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const taskData = {
        title: ctx.session.creatingTask.title,
        description: null,
        category: ctx.session.creatingTask.category,
        difficulty: ctx.session.creatingTask.difficulty,
        estimated_time: getEstimatedTime(ctx.session.creatingTask.difficulty)
      };
      
      const { customTask, todayTask } = await customTaskService.createAndAddToToday(ctx.from.id, taskData);
      const createdTask = customTask;
      
      if (createdTask) {
        const successText = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!*\n\n**${createdTask.title}**\n\n${getDifficultyIcon(createdTask.difficulty)} ${getDifficultyLabel(createdTask.difficulty)}\n‚è±Ô∏è ~${createdTask.estimated_time} –º–∏–Ω—É—Ç`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'show_tasks')],
          [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â—ë', 'custom_task_create')],
          [Markup.button.callback('üîô –í –º–µ–Ω—é', 'show_main_menu')]
        ]);
        
        await sendOrEditMessage(ctx, successText, keyboard);
      } else {
        const errorText = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.';
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'custom_task_create')],
          [Markup.button.callback('üîô –í –º–µ–Ω—é', 'custom_tasks_menu')]
        ]);
        await sendOrEditMessage(ctx, errorText, keyboard);
      }
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.creatingTask;
      return;
    }
    
    // –¢–æ–ª—å–∫–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    ctx.session.creatingTask.step = 'waiting_description';
    
    const descriptionExamples = {
      'hard': [
        "–í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—ã–≤–æ–¥—ã",
        "–¢—â–∞—Ç–µ–ª—å–Ω–æ, –≤–∫–ª—é—á–∞—è —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞",
        "–° –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"
      ]
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    let promptText;
    
    if (difficulty === 'hard' && descriptionExamples[difficulty]) {
      const examples = descriptionExamples[difficulty];
      const randomExample = examples[Math.floor(Math.random() * examples.length)];
      promptText = `*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${title}\n\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):\n\n_–ü—Ä–∏–º–µ—Ä: "${randomExample}"_`;
    } else {
      promptText = `*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${title}\n\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):`;
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_description')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'custom_tasks_menu')]
    ]);
    
    await sendOrEditMessage(ctx, promptText, keyboard);
  } catch (error) {
    console.error('Error in handleTaskTitle:', error);
    const errorText = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.';
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –í –º–µ–Ω—é', 'custom_tasks_menu')]
    ]);
    await sendOrEditMessage(ctx, errorText, keyboard);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –µ—ë
const handleTaskDescription = async (ctx, customTaskService) => {
  try {
    if (!ctx.session?.creatingTask || ctx.session.creatingTask.step !== 'waiting_description') {
      return;
    }
    
    let description = null;
    if (ctx.message.text.trim().toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      description = ctx.message.text.trim();
      
      if (description.length > 500) {
        const errorText = '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:';
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_description')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'custom_tasks_menu')]
        ]);
        await sendOrEditMessage(ctx, errorText, keyboard);
        return;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const taskData = {
      title: ctx.session.creatingTask.title,
      description,
      category: ctx.session.creatingTask.category,
      difficulty: ctx.session.creatingTask.difficulty,
      estimated_time: getEstimatedTime(ctx.session.creatingTask.difficulty)
    };
    
    const { customTask, todayTask } = await customTaskService.createAndAddToToday(ctx.from.id, taskData);
    const createdTask = customTask;
    
    if (createdTask) {
      const successText = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!*\n\n**${createdTask.title}**\n${createdTask.description ? `\n${createdTask.description}` : ''}\n\n${getDifficultyIcon(createdTask.difficulty)} ${getDifficultyLabel(createdTask.difficulty)}\n‚è±Ô∏è ~${createdTask.estimated_time} –º–∏–Ω—É—Ç`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'show_tasks')],
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â—ë', 'custom_task_create')],
        [Markup.button.callback('üîô –í –º–µ–Ω—é', 'show_main_menu')]
      ]);
      
      await sendOrEditMessage(ctx, successText, keyboard);
    } else {
      const errorText = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.';
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'custom_task_create')],
        [Markup.button.callback('üîô –í –º–µ–Ω—é', 'custom_tasks_menu')]
      ]);
      await sendOrEditMessage(ctx, errorText, keyboard);
    }
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    delete ctx.session.creatingTask;
    
  } catch (error) {
    console.error('Error in handleTaskDescription:', error);
    const errorText = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.';
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –í –º–µ–Ω—é', 'custom_tasks_menu')]
    ]);
    await sendOrEditMessage(ctx, errorText, keyboard);
    delete ctx.session.creatingTask;
  }
};

// –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
const skipDescription = async (ctx, taskService) => {
  try {
    if (!ctx.session?.creatingTask) {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const taskData = {
      title: ctx.session.creatingTask.title,
      description: null,
      category: ctx.session.creatingTask.category,
      difficulty: ctx.session.creatingTask.difficulty,
      estimated_time: getEstimatedTime(ctx.session.creatingTask.difficulty)
    };

    const customTaskService = taskService.getCustomTaskService();
    const { customTask, todayTask } = await customTaskService.createAndAddToToday(ctx.from.id, taskData);
    const createdTask = customTask;
    
    if (createdTask) {
      const successText = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!*\n\n**${createdTask.title}**\n\n${getDifficultyIcon(createdTask.difficulty)} ${getDifficultyLabel(createdTask.difficulty)}\n‚è±Ô∏è ~${createdTask.estimated_time} –º–∏–Ω—É—Ç\n\nüìã –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ö –∑–∞–¥–∞—á–∞–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'show_tasks')],
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â—ë', 'custom_task_create')],
        [Markup.button.callback('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'show_main_menu')]
      ]);
      
      await sendOrEditMessage(ctx, successText, keyboard);
    } else {
      await sendOrEditMessage(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    delete ctx.session.creatingTask;
    await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!');
    
  } catch (error) {
    console.error('Error in skipDescription:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    delete ctx.session.creatingTask;
  }
};

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á
const showCustomTasksList = async (ctx, taskService, difficulty = null, page = 1) => {
  try {
    const telegramId = ctx.from.id;
    const filters = difficulty ? { difficulty } : {};
    const tasks = await taskService.getUserCustomTasks(telegramId, filters);
    
    if (tasks.length === 0) {
      const emptyText = difficulty 
        ? `–£ –≤–∞—Å –Ω–µ—Ç ${getDifficultyLabel(difficulty).toLowerCase()} –∑–∞–¥–∞—á.`
        : '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á.';
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', 'custom_task_create')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'custom_tasks_menu')]
      ]);
      
      await sendOrEditMessage(ctx, emptyText, keyboard);
      await ctx.answerCbQuery();
      return;
    }
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const tasksPerPage = 5;
    const totalPages = Math.ceil(tasks.length / tasksPerPage);
    const startIndex = (page - 1) * tasksPerPage;
    const endIndex = startIndex + tasksPerPage;
    const currentTasks = tasks.slice(startIndex, endIndex);
    
    let listText = difficulty 
      ? `üìã *${getDifficultyLabel(difficulty)} –∑–∞–¥–∞—á–∏* (${tasks.length})\n\n`
      : `üìã *–ú–æ–∏ –∑–∞–¥–∞—á–∏* (${tasks.length})\n\n`;
    
    currentTasks.forEach((task, index) => {
      const number = startIndex + index + 1;
      listText += `${number}. **${task.title}**\n`;
      listText += `${getDifficultyIcon(task.difficulty)} ‚è±Ô∏è ${task.estimated_time}–º–∏–Ω\n`;
      if (task.description) {
        listText += `_${task.description.length > 50 ? task.description.substring(0, 50) + '...' : task.description}_\n`;
      }
      listText += '\n';
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const buttons = [];
    
    // –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const taskButtons = currentTasks.map((task, index) => {
      const number = startIndex + index + 1;
      return Markup.button.callback(`${number}`, `edit_task_${task.id}`);
    });
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á –Ω–∞ —Ä—è–¥—ã –ø–æ 5
    for (let i = 0; i < taskButtons.length; i += 5) {
      buttons.push(taskButtons.slice(i, i + 5));
    }
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if (totalPages > 1) {
      const paginationButtons = [];
      if (page > 1) {
        paginationButtons.push(Markup.button.callback('‚¨ÖÔ∏è', `list_tasks_${difficulty || 'all'}_${page - 1}`));
      }
      paginationButtons.push(Markup.button.callback(`${page}/${totalPages}`, 'noop'));
      if (page < totalPages) {
        paginationButtons.push(Markup.button.callback('‚û°Ô∏è', `list_tasks_${difficulty || 'all'}_${page + 1}`));
      }
      buttons.push(paginationButtons);
    }
    
    // –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (!difficulty) {
      buttons.push([
        Markup.button.callback('üíö –ü—Ä–æ—Å—Ç—ã–µ', 'list_tasks_easy_1'),
        Markup.button.callback('üìà –°—Ä–µ–¥–Ω–∏–µ', 'list_tasks_standard_1')
      ]);
      buttons.push([
        Markup.button.callback('üî• –°–ª–æ–∂–Ω—ã–µ', 'list_tasks_hard_1'),
        Markup.button.callback('‚ú® –í–æ–ª—à–µ–±–Ω—ã–µ', 'list_tasks_magic_1')
      ]);
    } else {
      buttons.push([Markup.button.callback('üìã –í—Å–µ –∑–∞–¥–∞—á–∏', 'list_tasks_all_1')]);
    }
    
    // –î–µ–π—Å—Ç–≤–∏—è
    buttons.push([
      Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å', 'custom_task_create'),
      Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'custom_tasks_menu')
    ]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    await sendOrEditMessage(ctx, listText, keyboard);
    await ctx.answerCbQuery();
    
  } catch (error) {
    console.error('Error in showCustomTasksList:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á');
  }
};

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const showTaskForEdit = async (ctx, taskService, taskId) => {
  try {
    const task = await taskService.getCustomTaskService().getCustomTaskById(taskId, ctx.from.id);
    
    if (!task) {
      await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    const taskText = `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏*\n\n**${task.title}**\n${task.description ? `\n${task.description}\n` : ''}\n${getDifficultyIcon(task.difficulty)} ${getDifficultyLabel(task.difficulty)}\n‚è±Ô∏è ~${task.estimated_time} –º–∏–Ω—É—Ç`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', `edit_task_title_${taskId}`)],
      [Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', `edit_task_desc_${taskId}`)],
      [Markup.button.callback('üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å', `edit_task_difficulty_${taskId}`)],
      [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', `delete_task_${taskId}`)],
      [Markup.button.callback('üîô –ö –∑–∞–¥–∞—á–∞–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'show_tasks')]
    ]);
    
    await sendOrEditMessage(ctx, taskText, keyboard);
    await ctx.answerCbQuery();
    
  } catch (error) {
    console.error('Error in showTaskForEdit:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏');
  }
};

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á
const showCustomTasksStats = async (ctx, taskService) => {
  try {
    const telegramId = ctx.from.id;
    const stats = await taskService.getCustomTasksStats(telegramId);
    
    const statsText = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–∏—Ö –∑–∞–¥–∞—á*\n\nüìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.total}\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active}\n\n*–ü–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:*\nüíö –ü—Ä–æ—Å—Ç—ã–µ: ${stats.byDifficulty.easy || 0}\nüìà –°—Ä–µ–¥–Ω–∏–µ: ${stats.byDifficulty.standard}\nüî• –°–ª–æ–∂–Ω—ã–µ: ${stats.byDifficulty.hard}\n‚ú® –í–æ–ª—à–µ–±–Ω—ã–µ: ${stats.byDifficulty.magic}`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'show_tasks')],
      [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', 'custom_task_create')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'custom_tasks_menu')]
    ]);
    
    await sendOrEditMessage(ctx, statsText, keyboard);
    await ctx.answerCbQuery();
    
  } catch (error) {
    console.error('Error in showCustomTasksStats:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
};

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
const confirmTaskDeletion = async (ctx, taskId) => {
  try {
    const confirmText = `‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_${taskId}`),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `edit_task_${taskId}`)
      ]
    ]);
    
    await sendOrEditMessage(ctx, confirmText, keyboard);
    await ctx.answerCbQuery();
    
  } catch (error) {
    console.error('Error in confirmTaskDeletion:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
  }
};

// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
const deleteTask = async (ctx, taskService, taskId) => {
  try {
    const result = await taskService.deleteCustomTask(taskId, ctx.from.id);
    
    if (result) {
      await sendOrEditMessage(ctx, '‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.');
      await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(async () => {
        try {
          await showCustomTasksList(ctx, taskService);
        } catch (error) {
          console.error('Error returning to task list:', error);
        }
      }, 2000);
    } else {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    }
    
  } catch (error) {
    console.error('Error in deleteTask:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
  }
};

module.exports = {
  showCustomTasksMenu,
  showCreateTaskDifficulty,
  showCreateTaskCategory,
  startTaskCreation,
  handleTaskTitle,
  handleTaskDescription,
  skipDescription,
  showCustomTasksList,
  showTaskForEdit,
  showCustomTasksStats,
  confirmTaskDeletion,
  deleteTask
};
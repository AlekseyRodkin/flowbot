// src/handlers/referralHandler.js
const { Markup } = require('telegraf');
const { sendOrEditMessage } = require('../utils/messageUtils');

class ReferralHandler {
  constructor(referralService) {
    this.referralService = referralService;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
  async showInviteMenu(ctx) {
    try {
      const user = ctx.state.user;
      const stats = await this.referralService.getReferralStats(user.id);
      const globalStats = await this.referralService.getGlobalStats();
      const referralLink = await this.referralService.generateReferralLink(user.id);

      let message = `üöÄ *–†–∞–∑–≤–∏–≤–∞–π FlowBot –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!*\n\n`;
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
      const progressBar = this.generateProgressBar(globalStats.progressPercent);
      message += `*–¶–µ–ª—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:*\n`;
      message += `${progressBar}\n`;
      message += `üë• ${globalStats.totalUsers}/1000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n`;

      // –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      message += `*–¢–≤–æ–π –≤–∫–ª–∞–¥:*\n`;
      message += `‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${stats.totalInvited}\n`;
      message += `üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeReferrals}\n`;
      message += `‚è≥ –ñ–¥—É—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${stats.pendingReferrals}\n`;
      
      if (stats.isPermanentPro) {
        message += `\nüèÜ *–¢—ã ‚Äî Founding Member!*\n`;
        message += `Pro –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞\n`;
      } else if (stats.daysOfProEarned > 0) {
        message += `\nüíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–Ω–µ–π Pro: ${stats.daysOfProEarned}\n`;
      }

      message += `\nüì® *–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:*\n`;
      message += `\`${referralLink}\`\n\n`;
      
      message += `üéÅ *–ß—Ç–æ –ø–æ–ª—É—á–∞—é—Ç –¥—Ä—É–∑—å—è:*\n`;
      message += `‚Ä¢ 30 –¥–Ω–µ–π Pro –ø–æ—Å–ª–µ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n`;
      message += `‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ—É—á\n`;
      message += `‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É\n\n`;
      
      message += `üéØ *–¢–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã:*\n`;
      message += `‚Ä¢ 1 –¥—Ä—É–≥ = +30 –¥–Ω–µ–π Pro\n`;
      message += `‚Ä¢ 3 –¥—Ä—É–≥–∞ = Pro –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞\n`;
      message += `‚Ä¢ 5 –¥—Ä—É–∑–µ–π = Pro –Ω–∞–≤—Å–µ–≥–¥–∞ + —Å—Ç–∞—Ç—É—Å Founding Member\n`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram', 'share_telegram')],
        [Markup.button.callback('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', 'copy_invite_text')],
        [Markup.button.callback('üë• –ú–æ–∏ –¥—Ä—É–∑—å—è', 'show_friends')],
        [Markup.button.callback('üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤', 'referral_leaderboard')],
        [Markup.button.callback('üéØ –°–æ–∑–¥–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂', 'create_challenge')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_menu')]
      ]);

      await sendOrEditMessage(ctx, message, keyboard);
    } catch (error) {
      console.error('Error showing invite menu:', error);
      await sendOrEditMessage(ctx, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é');
    }
  }

  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram
  async shareInTelegram(ctx) {
    try {
      const user = ctx.state.user;
      const referralLink = await this.referralService.generateReferralLink(user.id);
      
      const shareText = this.getShareText(user.first_name, referralLink);
      
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.url(
          'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', 
          `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`
        )],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'invite')]
      ]);

      await sendOrEditMessage(ctx, 
        `üì§ *–ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏*\n\n` +
        `–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª—é–±–æ–π —á–∞—Ç:`, 
        keyboard
      );
    } catch (error) {
      console.error('Error sharing:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  async showCopyText(ctx) {
    try {
      const user = ctx.state.user;
      const referralLink = await this.referralService.generateReferralLink(user.id);
      const shareText = this.getShareText(user.first_name, referralLink);

      const backKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'invite')]
      ]);
      
      await sendOrEditMessage(ctx,
        `üìã *–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è*\n\n` +
        `–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–∑—å—è–º:\n\n` +
        `\`\`\`\n${shareText}\n\`\`\``,
        backKeyboard
      );
    } catch (error) {
      console.error('Error showing copy text:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
  async showFriends(ctx) {
    try {
      const user = ctx.state.user;
      const stats = await this.referralService.getReferralStats(user.id);

      if (!stats.friends || stats.friends.length === 0) {
        const noFriendsKeyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üì§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'share_telegram')],
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'invite')]
        ]);
        
        await sendOrEditMessage(ctx,
          `üë• *–¢–≤–æ–∏ –¥—Ä—É–∑—å—è*\n\n` +
          `–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ.\n\n` +
          `–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ —Å–ª–µ–¥–∏ –∑–∞ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∑–¥–µ—Å—å!`,
          noFriendsKeyboard
        );
        return;
      }

      let message = `üë• *–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –≤ FlowBot*\n\n`;

      for (const friend of stats.friends) {
        const name = friend.users?.first_name || '–î—Ä—É–≥';
        const status = this.getFriendStatus(friend.status);
        const level = friend.users?.level || 1;
        const activeDays = friend.daily_stats?.length || 0;

        message += `${status} *${name}*\n`;
        message += `   –î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${level <= 30 ? `${level}/30` : `${level} (–∑–∞–≤–µ—Ä—à–µ–Ω–∞!)`}\n`;
        
        if (friend.status === 'pending') {
          message += `   –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: ${activeDays}/7\n`;
          message += `   –î–æ –Ω–∞–≥—Ä–∞–¥—ã: ${7 - activeDays} –¥–Ω–µ–π\n`;
        } else if (friend.status === 'active') {
          message += `   ‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n`;
        }
        message += '\n';
      }

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ', 'share_telegram')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'invite')]
      ]);

      await sendOrEditMessage(ctx, message, keyboard);
    } catch (error) {
      console.error('Error showing friends:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
  async showLeaderboard(ctx) {
    try {
      const user = ctx.state.user;
      const stats = await this.referralService.getReferralStats(user.id);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥)
      const { data: topReferrers } = await ctx.state.supabase
        .rpc('get_top_referrers', { limit: 10 });

      let message = `üèÜ *–¢–æ–ø –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ FlowBot*\n\n`;

      const medals = ['ü•á', 'ü•à', 'ü•â'];
      
      topReferrers?.forEach((referrer, index) => {
        const medal = medals[index] || `${index + 1}.`;
        const isYou = referrer.user_id === user.id ? ' _(—ç—Ç–æ —Ç—ã!)_' : '';
        
        message += `${medal} *${referrer.first_name}*${isYou}\n`;
        message += `   –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referrer.referral_count} –¥—Ä—É–∑–µ–π\n`;
        
        if (referrer.is_founding_member) {
          message += `   üèÜ Founding Member\n`;
        }
        message += '\n';
      });

      if (stats.leaderboardPosition > 10) {
        message += `...\n\n`;
        message += `${stats.leaderboardPosition}. *${user.first_name}* _(—ç—Ç–æ —Ç—ã)_\n`;
        message += `   –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.activeReferrals} –¥—Ä—É–∑–µ–π\n`;
      }

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì§ –î–æ–≥–Ω–∞—Ç—å –ª–∏–¥–µ—Ä–æ–≤', 'share_telegram')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'invite')]
      ]);

      await sendOrEditMessage(ctx, message, keyboard);
    } catch (error) {
      console.error('Error showing leaderboard:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ —Å –¥—Ä—É–∑—å—è–º–∏
  async createChallenge(ctx) {
    try {
      const user = ctx.state.user;
      const referralLink = await this.referralService.generateReferralLink(user.id);

      const challengeText = 
        `üèÜ *–ù–ï–î–ï–õ–¨–ù–´–ô –ß–ï–õ–õ–ï–ù–î–ñ –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò*\n\n` +
        `${user.first_name} –±—Ä–æ—Å–∞–µ—Ç –≤—ã–∑–æ–≤!\n\n` +
        `üìã –ü—Ä–∞–≤–∏–ª–∞:\n` +
        `‚Ä¢ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n` +
        `‚Ä¢ –ú–∏–Ω–∏–º—É–º 20 –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å\n` +
        `‚Ä¢ –ö—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –¥–µ–Ω—å - –≤—ã–±—ã–≤–∞–µ—Ç\n` +
        `‚Ä¢ –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –ø–æ–∫—É–ø–∞–µ—Ç –ø–∏—Ü—Ü—É üçï\n\n` +
        `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: ${referralLink}`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.url(
          'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –¥—Ä—É–∑—å—è–º',
          `https://t.me/share/url?text=${encodeURIComponent(challengeText)}`
        )],
        [Markup.button.callback('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç', 'copy_challenge')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'invite')]
      ]);

      await sendOrEditMessage(ctx,
        `üéØ *–°–æ–∑–¥–∞–π —á–µ–ª–ª–µ–Ω–¥–∂ —Å –¥—Ä—É–∑—å—è–º–∏*\n\n` +
        `–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ - –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Å—Ç–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ!\n\n` +
        `–û—Ç–ø—Ä–∞–≤—å –¥—Ä—É–∑—å—è–º –≤—ã–∑–æ–≤ –∏ –ø–æ–∫–∞–∂–∏, –∫—Ç–æ –∑–¥–µ—Å—å —Å–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π üí™`,
        keyboard
      );
    } catch (error) {
      console.error('Error creating challenge:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
  generateProgressBar(percent) {
    const filled = Math.round(percent / 10);
    const empty = 10 - filled;
    return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty) + ` ${percent}%`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∞
  getFriendStatus(status) {
    const statuses = {
      'pending': '‚è≥',
      'active': '‚úÖ',
      'rewarded': 'üèÜ'
    };
    return statuses[status] || 'üë§';
  }

  // –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
  getShareText(userName, link) {
    const variants = [
      {
        title: "–î—Ä—É–∂–µ—Å–∫–∏–π",
        text: `–ü—Ä–∏–≤–µ—Ç! ${userName} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç FlowBot –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–µ–±–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!\n\n` +
              `üöÄ –ß—Ç–æ —ç—Ç–æ:\n` +
              `–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –∑–∞ 15 –¥–Ω–µ–π —á–µ—Ä–µ–∑ –Ω–∞—É—á–Ω—É—é –º–µ—Ç–æ–¥–∏–∫—É Flow List\n\n` +
              `üéÅ –ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n` +
              `‚Ä¢ 30 –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n` +
              `‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ—É—á\n` +
              `‚Ä¢ 30 –¥–Ω–µ–π Pro –ø–æ—Å–ª–µ –Ω–µ–¥–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n` +
              `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: ${link}`
      },
      {
        title: "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π",
        text: `üí™ –•–æ—á–µ—à—å —Å—Ç–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ –≤ 3 —Ä–∞–∑–∞ –∑–∞ 15 –¥–Ω–µ–π?\n\n` +
              `–Ø —É–∂–µ ${userName} –¥–Ω–µ–π –≤ FlowBot –∏ –≤—ã–ø–æ–ª–Ω—è—é –ø–æ 30 –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å!\n\n` +
              `–≠—Ç–æ –Ω–µ –º–∞–≥–∏—è, –∞ –Ω–∞—É—á–Ω–∞—è –º–µ—Ç–æ–¥–∏–∫–∞:\n` +
              `‚úÖ –ù–∞—á–∏–Ω–∞–µ—à—å —Å –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á\n` +
              `‚úÖ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–ª–æ–∂–Ω—è–µ—à—å\n` +
              `‚úÖ –í—Ö–æ–¥–∏—à—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞\n\n` +
              `–ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ: ${link}`
      },
      {
        title: "–ß–µ–ª–ª–µ–Ω–¥–∂",
        text: `üèÜ –í–´–ó–û–í –ü–†–ò–ù–Ø–¢?\n\n` +
              `${userName} –≤—ã–ø–æ–ª–Ω—è–µ—Ç 30 –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å —Å FlowBot!\n\n` +
              `–°–ø–æ—Ä–∏–º, —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –Ω–µ–¥–µ–ª—é –ø–æ–¥—Ä—è–¥? üòè\n\n` +
              `–ï—Å–ª–∏ –ø—Ä–æ–¥–µ—Ä–∂–∏—à—å—Å—è 7 –¥–Ω–µ–π:\n` +
              `üéÅ –ü–æ–ª—É—á–∏—à—å Pro –Ω–∞ –º–µ—Å—è—Ü\n` +
              `üí™ –ü—Ä–æ–∫–∞—á–∞–µ—à—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n` +
              `üî• –î–æ–∫–∞–∂–µ—à—å, —á—Ç–æ –º–æ–∂–µ—à—å\n\n` +
              `–ü—Ä–∏–Ω–∏–º–∞–π –≤—ã–∑–æ–≤: ${link}`
      }
    ];

    // –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –ø–µ—Ä–≤—ã–π
    return variants[0].text;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  async handleReferralStart(ctx, referralCode) {
    try {
      const newUser = ctx.state.user;
      
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å ref_
      const cleanCode = referralCode.replace('ref_', '');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª
      const referral = await this.referralService.processReferral(
        newUser.id, 
        cleanCode
      );

      if (referral) {
        await sendOrEditMessage(ctx,
          `üéâ *–û—Ç–ª–∏—á–Ω–æ!*\n\n` +
          `–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –¥—Ä—É–≥–∞!\n\n` +
          `–ö–æ–≥–¥–∞ —Ç—ã –±—É–¥–µ—à—å –∞–∫—Ç–∏–≤–µ–Ω 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥:\n` +
          `‚úÖ –¢—ã –ø–æ–ª—É—á–∏—à—å 30 –¥–Ω–µ–π Pro –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n` +
          `‚úÖ –¢–≤–æ–π –¥—Ä—É–≥ —Ç–æ–∂–µ –ø–æ–ª—É—á–∏—Ç 30 –¥–Ω–µ–π Pro\n\n` +
          `–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ç–≤–æ–π –ø—É—Ç—å –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! üöÄ`
        );
        
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Error handling referral start:', error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
  async checkReferralActivation(userId) {
    try {
      const activated = await this.referralService.activateReferral(userId);
      
      if (activated) {
        console.log(`Referral activated for user ${userId}`);
      }
    } catch (error) {
      console.error('Error checking referral activation:', error);
    }
  }
}

module.exports = { ReferralHandler };

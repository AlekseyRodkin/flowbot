// test-bot.js - –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function testBotFunctions() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FlowBot...\n');
  
  // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á...');
  const AIService = require('./src/services/aiService');
  const aiService = new AIService();
  
  try {
    const tasks = await aiService.generateTasks({
      level: 1,
      preferences: ['productivity', 'health'],
      antiPatterns: []
    });
    console.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á:', tasks.length);
    console.log('–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:');
    tasks.slice(0, 5).forEach(task => {
      console.log(`  - ${task.text} (${task.type})`);
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á:', error.message);
  }
  
  console.log('\n-------------------\n');
  
  // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  const UserService = require('./src/services/userService');
  const userService = new UserService(supabase);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID)
  const testUserId = 'test_user_' + Date.now(); // –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π ID
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await userService.createUser({
      telegram_id: testUserId,
      username: 'test_user',
      first_name: 'Test',
      last_name: 'User'
    });
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.telegram_id);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await userService.getUserStats(user.id);
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', stats);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', error.message);
  }
  
  console.log('\n-------------------\n');
  
  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');
  
  try {
    const { data: achievements } = await supabase
      .from('achievements')
      .select('*')
      .limit(5);
    
    console.log('üèÜ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:');
    achievements?.forEach(ach => {
      console.log(`  ${ach.icon} ${ach.name} - ${ach.description}`);
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error.message);
  }
  
  console.log('\n-------------------\n');
  
  // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
  console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É...');
  const ReferralService = require('./src/services/referralService');
  const referralService = new ReferralService(supabase);
  
  try {
    const refLink = referralService.generateReferralLink('123456');
    console.log('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:', refLink);
    
    const refCode = referralService.parseReferralCode('ref_123456');
    console.log('üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–¥:', refCode);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error.message);
  }
  
  console.log('\n-------------------\n');
  console.log('‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüì± –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram:');
  console.log('  /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥');
  console.log('  /task - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏');
  console.log('  /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
  console.log('  /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
  console.log('  /invite - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testBotFunctions().catch(console.error);

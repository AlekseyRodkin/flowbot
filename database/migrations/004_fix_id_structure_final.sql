-- –ú–∏–≥—Ä–∞—Ü–∏—è 004: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ID (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
-- –¶–µ–ª—å: —É–±—Ä–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—É –º–µ–∂–¥—É id –∏ telegram_id
-- –†–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å telegram_id –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á –≤–µ–∑–¥–µ
-- –í–ê–ñ–ù–û: –†–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π achievements (UUID)

-- 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É achievements –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –∫ –Ω–µ–π
DO $$ 
DECLARE
    achievements_id_type text;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–ª—è id –≤ —Ç–∞–±–ª–∏—Ü–µ achievements
    SELECT data_type INTO achievements_id_type
    FROM information_schema.columns 
    WHERE table_name = 'achievements' AND column_name = 'id';
    
    -- –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å UUID (—Å—Ç–∞–Ω–¥–∞—Ä—Ç Supabase)
    IF achievements_id_type IS NULL THEN
        CREATE TABLE achievements (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            code VARCHAR(50) UNIQUE NOT NULL,
            name VARCHAR(255),
            description TEXT,
            icon VARCHAR(50),
            points INTEGER DEFAULT 10
        );
        
        -- –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        INSERT INTO achievements (code, name, description, icon, points) VALUES
        ('first_task', '–ü–µ—Ä–≤—ã–π —à–∞–≥', '–í—ã–ø–æ–ª–Ω–∏–ª –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É', 'üéØ', 10),
        ('streak_3', '–†–∞–∑–≥–æ–Ω', '3 –¥–Ω—è –ø–æ–¥—Ä—è–¥', 'üî•', 20),
        ('streak_7', '–ù–µ–¥–µ–ª—è —Å–∏–ª—ã', '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', 'üí™', 50),
        ('tasks_100', '–¶–µ–Ω—Ç—É—Ä–∏–æ–Ω', '100 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á', 'üíØ', 100),
        ('early_bird', '–ñ–∞–≤–æ—Ä–æ–Ω–æ–∫', '–í—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á–∏ –¥–æ 7 —É—Ç—Ä–∞', 'üåÖ', 30);
    END IF;
    
    RAISE NOTICE 'Achievements table id type: %', COALESCE(achievements_id_type, 'UUID (created)');
END $$;

-- 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É users —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
DROP TABLE IF EXISTS users_new CASCADE;
CREATE TABLE users_new (
    telegram_id BIGINT PRIMARY KEY,
    username VARCHAR(255),
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    level INTEGER DEFAULT 1,
    subscription_type VARCHAR(50) DEFAULT 'free',
    subscription_end DATE,
    morning_hour INTEGER DEFAULT 8,
    evening_hour INTEGER DEFAULT 21,
    timezone VARCHAR(50) DEFAULT 'Europe/Moscow',
    language VARCHAR(10) DEFAULT 'ru',
    onboarding_completed BOOLEAN DEFAULT FALSE,
    preferences TEXT[],
    anti_patterns TEXT[],
    last_seen TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- 3. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å telegram_id –≤–º–µ—Å—Ç–æ user_id
DROP TABLE IF EXISTS tasks_new CASCADE;
CREATE TABLE tasks_new (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT REFERENCES users_new(telegram_id) ON DELETE CASCADE,
    date DATE NOT NULL,
    task_text TEXT NOT NULL,
    task_type VARCHAR(50),
    position INTEGER,
    completed BOOLEAN DEFAULT FALSE,
    completed_at TIMESTAMP,
    skipped BOOLEAN DEFAULT FALSE,
    ai_generated BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW()
);

DROP TABLE IF EXISTS daily_stats_new CASCADE;
CREATE TABLE daily_stats_new (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT REFERENCES users_new(telegram_id) ON DELETE CASCADE,
    date DATE NOT NULL,
    total_tasks INTEGER DEFAULT 0,
    completed_tasks INTEGER DEFAULT 0,
    easy_completed INTEGER DEFAULT 0,
    standard_completed INTEGER DEFAULT 0,
    hard_completed INTEGER DEFAULT 0,
    magic_completed BOOLEAN DEFAULT FALSE,
    flow_score INTEGER DEFAULT 0,
    productivity_index FLOAT,
    notes TEXT,
    mood VARCHAR(50),
    created_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(telegram_id, date)
);

DROP TABLE IF EXISTS streaks_new CASCADE;
CREATE TABLE streaks_new (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT REFERENCES users_new(telegram_id) ON DELETE CASCADE,
    current_streak INTEGER DEFAULT 0,
    longest_streak INTEGER DEFAULT 0,
    total_days INTEGER DEFAULT 0,
    last_completed_date DATE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- 4. –°–æ–∑–¥–∞–µ–º user_achievements —Å UUID –¥–ª—è achievement_id (–ø–æ–¥ Supabase —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
DROP TABLE IF EXISTS user_achievements_new CASCADE;
CREATE TABLE user_achievements_new (
    telegram_id BIGINT REFERENCES users_new(telegram_id) ON DELETE CASCADE,
    achievement_id UUID REFERENCES achievements(id) ON DELETE CASCADE,
    unlocked_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (telegram_id, achievement_id)
);

DROP TABLE IF EXISTS reflections_new CASCADE;
CREATE TABLE reflections_new (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT REFERENCES users_new(telegram_id) ON DELETE CASCADE,
    date DATE NOT NULL,
    what_worked TEXT,
    what_didnt TEXT,
    tomorrow_focus TEXT,
    ai_insights TEXT,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
DO $$
BEGIN
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ users
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'users') THEN
        -- –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        INSERT INTO users_new (
            telegram_id, username, first_name, last_name, level, subscription_type,
            subscription_end, timezone, language, onboarding_completed, created_at, updated_at
        )
        SELECT 
            telegram_id, username, first_name, last_name, level, subscription_type,
            subscription_end, timezone, language, onboarding_completed, created_at, updated_at
        FROM users
        WHERE telegram_id IS NOT NULL
        ON CONFLICT (telegram_id) DO NOTHING;

        -- –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'tasks') THEN
            INSERT INTO tasks_new (
                telegram_id, date, task_text, task_type, position, completed, completed_at,
                skipped, ai_generated, created_at
            )
            SELECT 
                u.telegram_id, t.date, t.task_text, t.task_type, t.position, t.completed, 
                t.completed_at, t.skipped, t.ai_generated, t.created_at
            FROM tasks t
            JOIN users u ON t.user_id = u.id
            WHERE u.telegram_id IS NOT NULL;
        END IF;

        -- –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'daily_stats') THEN
            INSERT INTO daily_stats_new (
                telegram_id, date, total_tasks, completed_tasks, easy_completed,
                standard_completed, hard_completed, magic_completed, flow_score,
                productivity_index, notes, mood, created_at
            )
            SELECT 
                u.telegram_id, d.date, d.total_tasks, d.completed_tasks, d.easy_completed,
                d.standard_completed, d.hard_completed, d.magic_completed, d.flow_score,
                d.productivity_index, d.notes, d.mood, d.created_at
            FROM daily_stats d
            JOIN users u ON d.user_id = u.id
            WHERE u.telegram_id IS NOT NULL
            ON CONFLICT (telegram_id, date) DO NOTHING;
        END IF;

        -- –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'streaks') THEN
            INSERT INTO streaks_new (
                telegram_id, current_streak, longest_streak, total_days,
                last_completed_date, created_at, updated_at
            )
            SELECT 
                u.telegram_id, s.current_streak, s.longest_streak, s.total_days,
                s.last_completed_date, s.created_at, s.updated_at
            FROM streaks s
            JOIN users u ON s.user_id = u.id
            WHERE u.telegram_id IS NOT NULL;
        END IF;

        -- –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å (—É—á–∏—Ç—ã–≤–∞—è UUID)
        IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'user_achievements') THEN
            INSERT INTO user_achievements_new (telegram_id, achievement_id, unlocked_at)
            SELECT 
                u.telegram_id, ua.achievement_id, ua.unlocked_at
            FROM user_achievements ua
            JOIN users u ON ua.user_id = u.id
            WHERE u.telegram_id IS NOT NULL
            ON CONFLICT (telegram_id, achievement_id) DO NOTHING;
        END IF;

        -- –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'reflections') THEN
            INSERT INTO reflections_new (
                telegram_id, date, what_worked, what_didnt, tomorrow_focus,
                ai_insights, created_at
            )
            SELECT 
                u.telegram_id, r.date, r.what_worked, r.what_didnt, r.tomorrow_focus,
                r.ai_insights, r.created_at
            FROM reflections r
            JOIN users u ON r.user_id = u.id
            WHERE u.telegram_id IS NOT NULL;
        END IF;
    END IF;
END $$;

-- 6. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ
DROP TABLE IF EXISTS user_achievements CASCADE;
DROP TABLE IF EXISTS reflections CASCADE;
DROP TABLE IF EXISTS daily_stats CASCADE;
DROP TABLE IF EXISTS streaks CASCADE;
DROP TABLE IF EXISTS tasks CASCADE;
DROP TABLE IF EXISTS users CASCADE;

ALTER TABLE users_new RENAME TO users;
ALTER TABLE tasks_new RENAME TO tasks;
ALTER TABLE daily_stats_new RENAME TO daily_stats;
ALTER TABLE streaks_new RENAME TO streaks;
ALTER TABLE user_achievements_new RENAME TO user_achievements;
ALTER TABLE reflections_new RENAME TO reflections;

-- 7. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CREATE INDEX IF NOT EXISTS idx_tasks_telegram_date ON tasks(telegram_id, date);
CREATE INDEX IF NOT EXISTS idx_tasks_date ON tasks(date);
CREATE INDEX IF NOT EXISTS idx_daily_stats_telegram_date ON daily_stats(telegram_id, date);
CREATE INDEX IF NOT EXISTS idx_streaks_telegram_id ON streaks(telegram_id);
CREATE INDEX IF NOT EXISTS idx_user_achievements_telegram_id ON user_achievements(telegram_id);
CREATE INDEX IF NOT EXISTS idx_reflections_telegram_date ON reflections(telegram_id, date);

-- 8. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç)
CREATE TABLE IF NOT EXISTS referrals (
    id SERIAL PRIMARY KEY,
    referrer_telegram_id BIGINT REFERENCES users(telegram_id) ON DELETE CASCADE,
    referred_telegram_id BIGINT REFERENCES users(telegram_id) ON DELETE CASCADE,
    referral_code VARCHAR(20) UNIQUE NOT NULL,
    status VARCHAR(20) DEFAULT 'pending', -- pending, active, completed
    reward_given BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW(),
    activated_at TIMESTAMP,
    UNIQUE(referred_telegram_id)
);

CREATE INDEX IF NOT EXISTS idx_referrals_code ON referrals(referral_code);
CREATE INDEX IF NOT EXISTS idx_referrals_referrer ON referrals(referrer_telegram_id);

-- 9. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ referred_by –≤ —Ç–∞–±–ª–∏—Ü–µ users, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'referred_by'
    ) THEN
        ALTER TABLE users ADD COLUMN referred_by BIGINT REFERENCES users(telegram_id);
        CREATE INDEX IF NOT EXISTS idx_users_referred_by ON users(referred_by);
    END IF;
END $$;

-- 10. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
COMMENT ON TABLE users IS '–û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, telegram_id - –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á';
COMMENT ON TABLE tasks IS '–ó–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–≤—è–∑—å —á–µ—Ä–µ–∑ telegram_id';
COMMENT ON TABLE daily_stats IS '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Å–≤—è–∑—å —á–µ—Ä–µ–∑ telegram_id';
COMMENT ON TABLE streaks IS '–°—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–≤—è–∑—å —á–µ—Ä–µ–∑ telegram_id';
COMMENT ON TABLE achievements IS '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ (UUID id –¥–ª—è Supabase)';
COMMENT ON TABLE user_achievements IS '–°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (achievement_id = UUID)';
COMMENT ON TABLE referrals IS '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞';

-- 11. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
DO $$
DECLARE
    achievement_type text;
    user_achievement_type text;
BEGIN
    SELECT data_type INTO achievement_type
    FROM information_schema.columns 
    WHERE table_name = 'achievements' AND column_name = 'id';
    
    SELECT data_type INTO user_achievement_type
    FROM information_schema.columns 
    WHERE table_name = 'user_achievements' AND column_name = 'achievement_id';
    
    RAISE NOTICE 'Final structure - achievements.id: %, user_achievements.achievement_id: %', 
        achievement_type, user_achievement_type;
        
    IF achievement_type = user_achievement_type THEN
        RAISE NOTICE '‚úÖ SUCCESS: Types match perfectly!';
    ELSE
        RAISE EXCEPTION '‚ùå ERROR: Type mismatch detected';
    END IF;
END $$;

-- –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
// bot/index.js
require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const winston = require('winston');
const moment = require('moment-timezone');

// Import handlers - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
const startHandler = require('../src/handlers/startHandler');
const { TaskHandler } = require('../src/handlers/taskHandler');
const { statsHandler } = require('../src/handlers/statsHandler');
const { settingsHandler } = require('../src/handlers/settingsHandler');
const { InviteHandler } = require('../src/handlers/inviteHandler');
const customTaskHandler = require('../src/handlers/customTaskHandler');
const { FeedbackHandler } = require('../src/handlers/feedbackHandler');
const { DonationHandler } = require('../src/handlers/donationHandler');

// Import services
const { TaskService } = require('../src/services/taskService');
const { UserService } = require('../src/services/userService');
const { AIService } = require('../src/services/aiService');
const { NotificationService } = require('../src/services/notificationService');
const { ReferralService } = require('../src/services/referralService');
const { CustomTaskService } = require('../src/services/customTaskService');
const { ViralService } = require('../src/services/viralService');
const { FeedbackService } = require('../src/services/feedbackService');

// Import session store
const { supabaseSession } = require('../src/utils/sessionStore');

// Import API server
const { startApiServer } = require('../src/api/server');

// Configure logger
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console({
      format: winston.format.simple()
    }),
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' })
  ]
});

// Initialize Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

// Initialize bot
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// Enable session middleware with Supabase storage
bot.use(supabaseSession(supabase));

// Initialize services
const userService = new UserService(supabase);
const taskService = new TaskService(supabase);
const aiService = new AIService();
const notificationService = new NotificationService(bot, supabase, taskService, aiService, userService);
const referralService = new ReferralService(supabase, bot);
const customTaskService = new CustomTaskService(supabase);
const viralService = new ViralService(supabase, bot, referralService);
const feedbackService = new FeedbackService(supabase, bot);

// Initialize handlers
const taskHandler = new TaskHandler(supabase);
const inviteHandler = new InviteHandler(referralService, userService, supabase);
const feedbackHandler = new FeedbackHandler(feedbackService);
const donationHandler = new DonationHandler();

// Middleware –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
  if (ctx.from) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º getOrCreateUser –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const user = await userService.getOrCreateUser(ctx.from);
      ctx.state.user = user;
      ctx.state.userService = userService;
      ctx.state.taskService = taskService;
    } catch (error) {
      logger.error('Error loading user:', error);
    }
  }
  await next();
});

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(async (ctx, next) => {
  const start = Date.now();

  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  console.log(`\nüì® –ü–æ–ª—É—á–µ–Ω–æ: ${ctx.updateType} –æ—Ç @${ctx.from?.username || ctx.from?.id}`);
  if (ctx.message?.text) {
    console.log(`   –ö–æ–º–∞–Ω–¥–∞: ${ctx.message.text}`);
  }
  if (ctx.callbackQuery?.data) {
    console.log(`   Callback: ${ctx.callbackQuery.data}`);
  }

  await next();

  const responseTime = Date.now() - start;
  logger.info(`${ctx.updateType} processed in ${responseTime}ms`);
  console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ ${responseTime}ms`);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const startParam = ctx.message.text.split(' ')[1];
  const user = ctx.state.user;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
  if (startParam && startParam.startsWith('ref_')) {
    const referralCode = startParam.substring(4);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–ø–µ—Ä–µ–¥–∞–µ–º user.id, –∞ –Ω–µ telegram_id!)
    const referral = await referralService.processReferral(user.id, referralCode);

    if (referral) {
      await ctx.reply(
        'üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –¥—Ä—É–≥–∞!\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π FlowBot 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ (–º–∏–Ω–∏–º—É–º 10 –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å), ' +
        '–∏ –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ Pro –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ! üéÅ',
        { parse_mode: 'Markdown' }
      );
    }
  }
  
  await startHandler.startHandler(ctx, userService);
});

// –ö–æ–º–∞–Ω–¥–∞ /reset - —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
bot.command('reset', async (ctx) => {
  const resetHandler = require('../src/handlers/resetHandler');
  await resetHandler.resetHandler(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /task –∏ /tasks - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
bot.command('task', async (ctx) => {
  const user = ctx.state.user;
  if (!user) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
    return;
  }
  await taskHandler.showTodayTasks(ctx, taskService, user);
});

bot.command('tasks', async (ctx) => {
  const user = ctx.state.user;
  if (!user) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
    return;
  }
  await taskHandler.showTodayTasks(ctx, taskService, user);
});

// –ö–æ–º–∞–Ω–¥–∞ /today - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
bot.command('today', async (ctx) => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ middleware
    const user = ctx.state.user;
    
    if (!user) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const existingTasks = await taskService.getTodayTasks(user.telegram_id);
    
    if (existingTasks && existingTasks.length > 0) {
      await ctx.reply('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –ò—Å–ø–æ–ª—å–∑—É–π /task —á—Ç–æ–±—ã –∏—Ö —É–≤–∏–¥–µ—Ç—å.');
      return;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    await ctx.reply('üåÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–≤–æ–π Flow List –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...');
    
    const level = user.level || 1;
    let taskConfig = {};
    
    if (level <= 5) {
      taskConfig = { easy: 30, standard: 0, hard: 0 };
    } else if (level <= 10) {
      taskConfig = { easy: 15, standard: 10, hard: 5 };
    } else {
      taskConfig = { easy: 10, standard: 10, hard: 10 };
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ AI
    const tasks = await aiService.generateTasks(taskConfig, {
      level: level,
      preferences: user.preferences || [],
      antiPatterns: user.anti_patterns || []
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏
    await taskService.createTasks(user.telegram_id, tasks);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    await taskHandler.showTodayTasks(ctx, taskService, user);
    
  } catch (error) {
    logger.error('Error generating today tasks:', error);
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /today:', error.message);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
bot.command('stats', async (ctx) => {
  const user = ctx.state.user;
  if (!user) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
    return;
  }
  await statsHandler.showStats(ctx, user, userService, taskService);
});

// –ö–æ–º–∞–Ω–¥–∞ /invite - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
bot.command('invite', async (ctx) => {
  const user = ctx.state.user;
  if (!user) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
    return;
  }
  await inviteHandler.showInviteMenu(ctx, user);
});

// –ö–æ–º–∞–Ω–¥–∞ /referral_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
bot.command('referral_stats', async (ctx) => {
  const user = ctx.state.user;
  if (!user) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
    return;
  }
  await inviteHandler.showDetailedStats(ctx, user);
});

// –ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
bot.command('settings', async (ctx) => {
  const user = ctx.state.user;
  if (!user) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
    return;
  }
  await settingsHandler.showSettings(ctx, user);
});

// –ö–æ–º–∞–Ω–¥–∞ /mytasks - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
bot.command('mytasks', async (ctx) => {
  const user = ctx.state.user;
  if (!user) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
    return;
  }
  await customTaskHandler.showCustomTasksMenu(ctx, taskService);
});

// –ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–º–æ—â—å
bot.help(async (ctx) => {
  const helpMessage = `
üéØ *FlowBot - –ö–æ–º–∞–Ω–¥—ã*

üìù *–†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏:*
/task –∏–ª–∏ /tasks - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/today - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç)
/mytasks - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
/stats - –¢–≤–æ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
/achievements - –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

ü§ù *–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ:*
/invite - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å Pro
/referral_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
/settings - –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/reset - –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π /task —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ü–æ–ª—É—á–∞–π 30 –∑–∞–¥–∞—á –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ
2. –û—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ ‚úÖ
3. –°–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
4. –í—Ö–æ–¥–∏ –≤ –ø–æ—Ç–æ–∫ –∑–∞ 15 –¥–Ω–µ–π!

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? @flowbot_support
  `;
  await ctx.replyWithMarkdown(helpMessage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (ctx.session?.awaitingFeedback) {
    await feedbackHandler.handleFeedbackMessage(ctx, feedbackService, userService);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –Ω–∞ –æ—Ç–∑—ã–≤
  if (ctx.session?.adminReplyTo) {
    try {
      const replyText = ctx.message.text;
      const { feedbackId, userId } = ctx.session.adminReplyTo;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.telegram.sendMessage(userId, `üí¨ *–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã FlowBot:*\n\n${replyText}`, {
        parse_mode: 'Markdown'
      });

      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.adminReplyTo;

      await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!', {
        reply_markup: { remove_keyboard: true }
      });

      console.log(`‚úÖ Admin replied to feedback #${feedbackId}, user ${userId}`);
    } catch (error) {
      console.error('Error sending admin reply:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞');
    }
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  if (ctx.session?.creatingTask) {
    if (ctx.session.creatingTask.step === 'waiting_title') {
      await customTaskHandler.handleTaskTitle(ctx, customTaskService);
    } else if (ctx.session.creatingTask.step === 'waiting_description') {
      await customTaskHandler.handleTaskDescription(ctx, customTaskService);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞
  if (ctx.session?.awaitingTemplateName) {
    await templateHandler.handleTemplateNameInput(ctx, taskService);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
  if (ctx.session?.waitingFor === 'replace_task_text' && ctx.session?.replacingTaskId) {
    const newText = ctx.message.text;
    const taskId = ctx.session.replacingTaskId;

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
      await taskService.updateTaskText(taskId, newText);

      await ctx.reply(
        '‚úÖ *–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\n–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[
              { text: 'üìã –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á', callback_data: 'show_tasks' }
            ]]
          }
        }
      );

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      delete ctx.session.waitingFor;
      delete ctx.session.replacingTaskId;

    } catch (error) {
      console.error('Error updating task:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
bot.on('voice', async (ctx) => {
  try {
    console.log('üé§ Voice message received from:', ctx.from.username || ctx.from.id);
    
    await ctx.replyWithMarkdown(`üé§ *–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è*

–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! 

–í –±—É–¥—É—â–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ò–ò-–∫–æ—É—á–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

üöÄ *–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π:*
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help, /task, /stats
‚Ä¢ –ö–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ "üéØ –ú–æ–∏ –∑–∞–¥–∞—á–∏"

üí° –ì–æ–ª–æ—Å–æ–≤–æ–π –∫–æ—É—á –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—Ä–µ–º–∏—É–º-–≤–µ—Ä—Å–∏–∏!`);

  } catch (error) {
    console.error('‚ùå Error processing voice message:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  const [action, ...params] = data.split('_');
  console.log(`üîç CALLBACK: data='${data}', action='${action}', params=${JSON.stringify(params)}`);

  switch(action) {
    case 'task':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
      await taskHandler.completeTask(ctx, taskService, params[0]);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–∞ 7-–π –∏ 14-–π –¥–µ–Ω—å –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI)
      setImmediate(() => {
        const user = ctx.state.user;
        if (user) {
          viralService.checkAndSendDay7Trigger(user.telegram_id)
            .catch(err => console.error('Error checking day 7 trigger:', err));
          viralService.checkAndSendDay14Reminder(user.telegram_id)
            .catch(err => console.error('Error checking day 14 reminder:', err));
        }
      });
      break;
    
    case 'tasks':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–¥–∞—á
      if (params[0] === 'page') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if (params[1] === 'next') {
          // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          if (ctx.session.tasksPage === undefined) ctx.session.tasksPage = 0;
          ctx.session.tasksPage++;
          await taskHandler.updateTaskMessage(ctx, taskService, ctx.from.id);
          await ctx.answerCbQuery();
        } else if (params[1] === 'prev') {
          // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          if (ctx.session.tasksPage === undefined) ctx.session.tasksPage = 0;
          ctx.session.tasksPage = Math.max(0, ctx.session.tasksPage - 1);
          await taskHandler.updateTaskMessage(ctx, taskService, ctx.from.id);
          await ctx.answerCbQuery();
        } else if (params[1] === 'info') {
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
          await ctx.answerCbQuery('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏');
        }
      }
      break;
    
    case 'replace':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é –∑–∞–º–µ–Ω—ã –∑–∞–¥–∞—á
      if (params[0] === 'page') {
        const user = ctx.state.user;
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!ctx.session) {
          ctx.session = {};
        }
        if (params[1] === 'next') {
          // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          if (ctx.session.replaceTaskPage === undefined) ctx.session.replaceTaskPage = 0;
          ctx.session.replaceTaskPage++;
          await taskHandler.showReplaceTaskMenu(ctx, taskService, user.id, ctx.session.replaceTaskPage);
          await ctx.answerCbQuery();
        } else if (params[1] === 'prev') {
          // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          if (ctx.session.replaceTaskPage === undefined) ctx.session.replaceTaskPage = 0;
          ctx.session.replaceTaskPage = Math.max(0, ctx.session.replaceTaskPage - 1);
          await taskHandler.showReplaceTaskMenu(ctx, taskService, user.id, ctx.session.replaceTaskPage);
          await ctx.answerCbQuery();
        }
      } else if (params[0] === 'task' && params[1]) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã
        const taskId = params[1];
        const user = ctx.state.user;
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!ctx.session) {
          ctx.session = {};
        }
        ctx.session.replacingTaskId = taskId;
        
        await ctx.editMessageText(
          '‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.',
          { parse_mode: 'Markdown' }
        );
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
        ctx.session.waitingFor = 'replace_task_text';
        await ctx.answerCbQuery();
      }
      break;
    
    case 'show':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      switch(params[0]) {
        case 'tasks':
          await taskHandler.showTodayTasks(ctx, taskService, ctx.state.user, true);
          break;
        case 'stats':
          await statsHandler.showStats(ctx, ctx.state.user, userService, taskService);
          break;
        case 'daily':
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          if (params[1] === 'stats') {
            await statsHandler.showStats(ctx, ctx.state.user, userService, taskService);
          }
          break;
        case 'settings':
          await settingsHandler.showSettings(ctx, ctx.state.user);
          break;
        case 'feedback':
          await feedbackHandler.showFeedbackMenu(ctx);
          break;
        case 'main':
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ show_main_menu
          if (params[1] === 'menu') {
            try {
              console.log('üè† –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.state.user?.telegram_id);
              const user = ctx.state.user;
              await startHandler.sendMainMenu(ctx, user, true, taskService);
              await ctx.answerCbQuery('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error.message, error.stack);
              await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
            }
          }
          break;
        case 'help':
          const helpMessage = `üéØ *FlowBot - –ö–æ–º–∞–Ω–¥—ã*

üìù *–†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏:*
/task –∏–ª–∏ /tasks - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/today - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å:*
/stats - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
/achievements - –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
/settings - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
/reset - –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–Ω–æ–≤–æ

üîí *–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –¥–∞–Ω–Ω—ã–µ:*
‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —É —Ç–µ–±—è
‚Ä¢ –ú—ã –Ω–µ —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á
‚Ä¢ –ù–∏–∫–∞–∫–æ–π —Ä–µ–∫–ª–∞–º—ã –∏ –ø—Ä–æ–¥–∞–∂–∏ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ú–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç

üí° *–î—Ä—É–≥–æ–µ:*
/invite - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π (Pro –±–µ—Å–ø–ª–∞—Ç–Ω–æ!)
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üîÑ *–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:*
–û—Ç–ø—Ä–∞–≤—å /today —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;

          const helpKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_menu')]
          ]);

          await ctx.editMessageText(helpMessage, {
            parse_mode: 'Markdown',
            ...helpKeyboard
          });
          break;
        case 'donation':
          // –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–Ω–∞—Ç–æ–≤
          await donationHandler.showDonationOptions(ctx, false);
          await ctx.answerCbQuery();
          break;
      }
      break;

    case 'complete':
      // –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å
      if (params[0] === 'day') {
        try {
          const user = ctx.state.user;
          const { g } = require('../src/utils/genderUtils');

          await ctx.answerCbQuery('–î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω!');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ 15-–π –¥–µ–Ω—å?
          if (user.level === 15) {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –¥–æ–Ω–∞—Ç–∏—Ç—å
            const congratsMessage = `üéâüéâüéâ *–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!* üéâüéâüéâ\n\n` +
              `–¢—ã ${g(user, '–ø—Ä–æ—à—ë–ª', '–ø—Ä–æ—à–ª–∞')} –í–°–Æ –ø—Ä–æ–≥—Ä–∞–º–º—É FlowBot!\n\n` +
              `*15 –¥–Ω–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Ä–∞–∑–≤–∏—Ç–∏—è!*\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `–¢—ã ${g(user, '—Å—Ç–∞–ª', '—Å—Ç–∞–ª–∞')} –ª—É—á—à–µ –±–ª–∞–≥–æ–¥–∞—Ä—è:\n` +
              `‚Ä¢ –°–≤–æ–∏–º —É—Å–∏–ª–∏—è–º –∏ —É–ø–æ—Ä—Å—Ç–≤—É üí™\n` +
              `‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ —Å–æ–±–æ–π üéØ\n` +
              `‚Ä¢ –ù–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ ‚ú®\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `*–¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞!*\n\n` +
              `–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–∞–ª—å—à–µ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤.\n\n` +
              `üíù *–ï—Å–ª–∏ FlowBot ${g(user, '–ø–æ–º–æ–≥', '–ø–æ–º–æ–≥–ª–∞')} —Ç–µ–±–µ - –ø–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç!*\n` +
              `–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º.`;

            const keyboard = Markup.inlineKeyboard([
              [
                Markup.button.callback('üíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', 'donation_show')
              ],
              [
                Markup.button.callback('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'show_stats')
              ],
              [
                Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'show_main_menu')
              ]
            ]);

            await ctx.editMessageText(congratsMessage, {
              parse_mode: 'Markdown',
              reply_markup: keyboard.reply_markup
            });
          } else {
            // –û–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è
            const completeMessage = `‚úÖ *–î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n` +
              `–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ${g(user, '–û—Ç–¥–æ—Ö–Ω–∏', '–û—Ç–¥–æ—Ö–Ω–∏')} –∏ –≥–æ—Ç–æ–≤—å—Å—è –∫ –Ω–æ–≤–æ–º—É –¥–Ω—é.\n\n` +
              `üìÖ –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å ${user.level}`;

            const keyboard = Markup.inlineKeyboard([
              [
                Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'show_stats')
              ],
              [
                Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'show_main_menu')
              ]
            ]);

            await ctx.editMessageText(completeMessage, {
              parse_mode: 'Markdown',
              reply_markup: keyboard.reply_markup
            });
          }

          // Level —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á (notificationService.js)

        } catch (error) {
          console.error('Error completing day:', error);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è');
        }
      }
      break;

    case 'donation':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤
      switch(params[0]) {
        case 'show':
          await donationHandler.showDonationOptions(ctx, true);
          await ctx.answerCbQuery();
          break;
        case 'sbp':
          await donationHandler.showSBPDetails(ctx);
          await ctx.answerCbQuery();
          break;
        case 'boosty':
          await donationHandler.showBoostyDetails(ctx);
          await ctx.answerCbQuery();
          break;
        case 'card':
          await donationHandler.showCardDetails(ctx);
          break;
        case 'thanks':
          await donationHandler.showThankYou(ctx);
          await ctx.answerCbQuery('–°–ø–∞—Å–∏–±–æ! ‚ù§Ô∏è');
          break;
      }
      break;

    case 'reset':
      // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      if (params[0] === 'progress') {
        await startHandler.resetProgress(ctx, userService);
      }
      break;

    
    
    
    case 'morning':
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á
      await settingsHandler.setMorningTime(ctx, userService, params[0]);
      break;

    case 'evening':
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
      await settingsHandler.setEveningTime(ctx, userService, params[0]);
      break;
    
    case 'level':
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      await startHandler.setUserLevel(ctx, userService, params[0]);
      break;
    
    case 'mood':
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
      await statsHandler.saveMood(ctx, params[0]);
      break;

    case 'stats':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      if (params[0] === 'weekly') {
        await statsHandler.showDetailedStats(ctx, 'weekly');
        await ctx.answerCbQuery();
      } else if (params[0] === 'monthly') {
        await statsHandler.showDetailedStats(ctx, 'monthly');
        await ctx.answerCbQuery();
      } else if (params[0] === 'achievements') {
        await statsHandler.showAchievements(ctx);
        await ctx.answerCbQuery();
      }
      break;

    case 'tz':
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
      await settingsHandler.setTimezone(ctx, userService, params[0]);
      break;

    case 'lang':
      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞
      await settingsHandler.changeLanguage(ctx, userService, params[0]);
      break;

    case 'cancel':
      // –û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞
      console.log(`üîç CANCEL HANDLER: action='cancel', params=${JSON.stringify(params)}`);
      if (params[0] === 'reset') {
        try {
          await ctx.answerCbQuery('–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω');
          console.log('üîÑ –û—Ç–º–µ–Ω—è–µ–º —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º editMessageText –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          const user = ctx.state.user;
          const message = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n` +
            `üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${user.morning_hour || 8}:00\n` +
            `üåô –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è: ${user.evening_hour || 21}:00\n` +
            `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || 'Europe/Moscow'}\n` +
            `üåê –Ø–∑—ã–∫: ${user.language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English'}\n` +
            `üíé –ü–æ–¥–ø–∏—Å–∫–∞: ${user.subscription_type === 'pro' ? 'Pro' : '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}\n` +
            `üìÖ –î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${user.level <= 15 ? `${user.level}/15` : `${user.level} (—Ç—ã –≤ –ø–æ—Ç–æ–∫–µ! üéâ)`}\n\n` +
            `–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?`;

          const keyboard = Markup.inlineKeyboard([
            [
              Markup.button.callback('üåÖ –í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á', 'settings_morning'),
              Markup.button.callback('üåô –í—Ä–µ–º—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏', 'settings_evening')
            ],
            [
              Markup.button.callback('üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', 'settings_timezone'),
              Markup.button.callback('üåê –Ø–∑—ã–∫', 'settings_language')
            ],
            [
              Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications'),
              Markup.button.callback('üíé –ü–æ–¥–ø–∏—Å–∫–∞', 'settings_subscription')
            ],
            [
              Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å', 'settings_reset'),
              Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'settings_delete')
            ],
            [
              Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_menu')
            ]
          ]);

          await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            ...keyboard
          });
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–±—Ä–æ—Å–∞:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã');
        }
      } else if (params[0] === 'delete') {
        try {
          await ctx.answerCbQuery('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
          console.log('üîÑ –û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º editMessageText –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          const user = ctx.state.user;
          const message = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n` +
            `üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${user.morning_hour || 8}:00\n` +
            `üåô –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è: ${user.evening_hour || 21}:00\n` +
            `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || 'Europe/Moscow'}\n` +
            `üåê –Ø–∑—ã–∫: ${user.language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English'}\n` +
            `üíé –ü–æ–¥–ø–∏—Å–∫–∞: ${user.subscription_type === 'pro' ? 'Pro' : '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}\n` +
            `üìÖ –î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${user.level <= 15 ? `${user.level}/15` : `${user.level} (—Ç—ã –≤ –ø–æ—Ç–æ–∫–µ! üéâ)`}\n\n` +
            `–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?`;

          const keyboard = Markup.inlineKeyboard([
            [
              Markup.button.callback('üåÖ –í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á', 'settings_morning'),
              Markup.button.callback('üåô –í—Ä–µ–º—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏', 'settings_evening')
            ],
            [
              Markup.button.callback('üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', 'settings_timezone'),
              Markup.button.callback('üåê –Ø–∑—ã–∫', 'settings_language')
            ],
            [
              Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications'),
              Markup.button.callback('üíé –ü–æ–¥–ø–∏—Å–∫–∞', 'settings_subscription')
            ],
            [
              Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å', 'settings_reset'),
              Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'settings_delete')
            ],
            [
              Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_menu')
            ]
          ]);

          await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            ...keyboard
          });
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã');
        }
      } else {
        const resetHandler = require('../src/handlers/resetHandler');
        await resetHandler.cancelReset(ctx);
      }
      break;
    
    case 'refresh':
      if (params[0] === 'confirmation') {
        try {
          await taskHandler.showRefreshWarning(ctx);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'tasks') {
        try {
          const user = ctx.state.user;
          
          await taskService.deleteTodayTasks(user.telegram_id);
          await ctx.answerCbQuery('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...');
          
          const level = user.level || 1;
          let taskConfig = {};
          
          if (level <= 5) {
            taskConfig = { easy: 30, standard: 0, hard: 0 };
          } else if (level <= 10) {
            taskConfig = { easy: 15, standard: 10, hard: 5 };
          } else {
            taskConfig = { easy: 10, standard: 10, hard: 10 };
          }
          
          const tasks = await aiService.generateTasks(taskConfig, {
            level: level,
            preferences: user.preferences || [],
            antiPatterns: user.anti_patterns || []
          });
          
          await taskService.createTasks(user.telegram_id, tasks);
          await taskHandler.showTodayTasks(ctx, taskService, user, true);
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á');
        }
      }
      break;
      
      
    case 'cancel_refresh':
      // –û—Ç–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
      try {
        const user = ctx.state.user;
        await taskHandler.showTodayTasks(ctx, taskService, user, true);
        await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
      }
      break;
    
    case 'settings':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (params[0] === 'done') {
        // –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ" - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try {
          const user = ctx.state.user;
          await ctx.answerCbQuery('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
          await startHandler.sendMainMenu(ctx, user, true, taskService);
        } catch (error) {
          console.error('Error returning to menu from settings:', error);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'morning') {
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á
        await ctx.answerCbQuery();
        await settingsHandler.showMorningTimeSelection(ctx, ctx.state.user);
      } else if (params[0] === 'evening') {
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        await ctx.answerCbQuery();
        await settingsHandler.showEveningTimeSelection(ctx, ctx.state.user);
      } else if (params[0] === 'timezone') {
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        await ctx.answerCbQuery();
        await settingsHandler.showTimezoneSettings(ctx);
      } else if (params[0] === 'language') {
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        await ctx.answerCbQuery();
        await settingsHandler.showLanguageSettings(ctx);
      } else if (params[0] === 'reset') {
        // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        try {
          await ctx.answerCbQuery('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');

          const keyboard = Markup.inlineKeyboard([
            [
              Markup.button.callback('‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë', 'confirm_reset'),
              Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_reset')
            ]
          ]);

          await ctx.editMessageText(
            '‚ö†Ô∏è *–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞*\n\n' +
            '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:\n' +
            '‚Ä¢ –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n' +
            '‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å—Ç—Ä–∏–∫–∏\n' +
            '‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n' +
            '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n' +
            '–¢—ã –Ω–∞—á–Ω–µ—à—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Å 1 –¥–Ω—è.\n\n' +
            '*–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!*',
            {
              parse_mode: 'Markdown',
              ...keyboard
            }
          );

        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
      } else if (params[0] === 'delete') {
        // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        try {
          await ctx.answerCbQuery('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞');

          const keyboard = Markup.inlineKeyboard([
            [
              Markup.button.callback('üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'confirm_delete'),
              Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_delete')
            ]
          ]);

          await ctx.editMessageText(
            'üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞*\n\n' +
            '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ *–ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ò–¢* —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç:\n' +
            '‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ\n' +
            '‚Ä¢ –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n' +
            '‚Ä¢ –í—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n' +
            '‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n' +
            '*–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –ù–ï–í–û–ó–ú–û–ñ–ù–û!*',
            {
              parse_mode: 'Markdown',
              ...keyboard
            }
          );

        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞');
        }
      }
      break;

    case 'share':
    case 'invite':
    case 'referral':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      ctx.session = { user: ctx.state.user };
      // –°–æ–∑–¥–∞—ë–º ctx.match –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å handleCallback
      ctx.match = [data];
      await inviteHandler.handleCallback(ctx);
      break;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á
    case 'custom':
      if (params[0] === 'tasks' && params[1] === 'menu') {
        await customTaskHandler.showCustomTasksMenu(ctx, taskService);
      } else if (params[0] === 'task') {
        switch (params[1]) {
          case 'create':
            await customTaskHandler.showCreateTaskDifficulty(ctx);
            break;
          case 'list':
            await customTaskHandler.showCustomTasksList(ctx, taskService);
            break;
          case 'stats':
            await customTaskHandler.showCustomTasksStats(ctx, taskService);
            break;
        }
      }
      break;

    case 'create':
      if (params[0] === 'task') {
        if (params[1] === 'easy' || params[1] === 'standard' || params[1] === 'hard' || params[1] === 'magic') {
          await customTaskHandler.showCreateTaskCategory(ctx, params[1]);
        } else if (params[1] === 'cat') {
          const category = params[2];
          const difficulty = params[3];
          await customTaskHandler.startTaskCreation(ctx, category, difficulty);
        }
      }
      break;

    case 'list':
      if (params[0] === 'tasks') {
        const difficulty = params[1] === 'all' ? null : params[1];
        const page = parseInt(params[2]) || 1;
        await customTaskHandler.showCustomTasksList(ctx, taskService, difficulty, page);
      }
      break;


    case 'delete':
      if (params[0] === 'task') {
        const taskId = params[1];
        await customTaskHandler.confirmTaskDeletion(ctx, taskId);
      }
      break;

    case 'confirm':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
      console.log(`üîç CONFIRM HANDLER: action='confirm', params=${JSON.stringify(params)}`);
      if (params[0] === 'reset') {
        console.log('üîÑ Executing reset confirmation');
        await startHandler.confirmReset(ctx, userService, taskService);
      } else if (params[0] === 'delete') {
        if (params[1]) {
          // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
          const taskId = params[1];
          await customTaskHandler.deleteTask(ctx, taskService, taskId);
        } else {
          // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
          try {
            console.log('üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
            const user = ctx.state.user;

            await taskService.deleteAllUserTasks(user.telegram_id);
            await userService.deleteUser(user.telegram_id);

            await ctx.answerCbQuery('üóëÔ∏è –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω');
            await ctx.editMessageText(
              'üóëÔ∏è *–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω*\n\n' +
              '–í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n' +
              '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª FlowBot! üëã',
              { parse_mode: 'Markdown' }
            );
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error.message);
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞');
          }
        }
      } else if (params[0] === 'bulk') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        const user = ctx.state.user;
        try {
          if (params[1] === 'complete' && params[2] === 'all') {
            await taskService.bulkCompleteAllTasks(user.telegram_id);
            await taskHandler.updateTaskMessage(ctx, taskService, user.telegram_id);
            await ctx.answerCbQuery('‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ!');
          } else if (params[1] === 'uncomplete' && params[2] === 'all') {
            await taskService.bulkUncompleteAllTasks(user.telegram_id);
            await taskHandler.updateTaskMessage(ctx, taskService, user.telegram_id);
            await ctx.answerCbQuery('‚¨ú –û—Ç–º–µ—Ç–∫–∏ —Å–Ω—è—Ç—ã —Å–æ –≤—Å–µ—Ö –∑–∞–¥–∞—á!');
          } else if (params[1] === 'delete' && params[2] === 'completed') {
            const deleted = await taskService.bulkDeleteCompletedTasks(user.telegram_id);
            await taskHandler.updateTaskMessage(ctx, taskService, user.telegram_id);
            await ctx.answerCbQuery(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deleted.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!`);
          } else if (params[1] === 'shuffle' && params[2] === 'tasks') {
            await taskService.shuffleTasksOrder(user.telegram_id);
            await taskHandler.updateTaskMessage(ctx, taskService, user.telegram_id);
            await ctx.answerCbQuery('üîÑ –ü–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á –ø–µ—Ä–µ–º–µ—à–∞–Ω!');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è');
        }
      } else {
        console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä confirm:', params[0]);
      }
      break;

    case 'skip':
      if (params[0] === 'description') {
        await customTaskHandler.skipDescription(ctx, taskService);
      }
      break;

      
    case 'mode':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
      if (params[0] === 'ai' && params[1] === 'generate') {
        // –†–µ–∂–∏–º: –±–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏
        try {
          const user = ctx.state.user;
          await ctx.answerCbQuery('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–¥–∞—á–∏...');
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∫ –æ–±—ã—á–Ω–æ
          const level = user.level || 1;
          let taskConfig = {};

          // –≠—Ç–∞–ø 1 (–î–Ω–∏ 1-5): Easy - 30 –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–ª
          // –≠—Ç–∞–ø 2 (–î–Ω–∏ 6-10): Standard - 20 –ø—Ä–æ—Å—Ç—ã—Ö + 10 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö (–ë–ï–ó —Å–ª–æ–∂–Ω—ã—Ö!)
          // –≠—Ç–∞–ø 3 (–î–Ω–∏ 11-15+): Hard - 10 –ø—Ä–æ—Å—Ç—ã—Ö + 12 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö + 8 —Å–ª–æ–∂–Ω—ã—Ö
          if (level <= 5) {
            taskConfig = { easy: 30, standard: 0, hard: 0 };
          } else if (level <= 10) {
            taskConfig = { easy: 20, standard: 10, hard: 0 };
          } else {
            taskConfig = { easy: 10, standard: 12, hard: 8 };
          }
          
          const tasks = await aiService.generateTasks(taskConfig, {
            level: level,
            preferences: user.preferences || [],
            antiPatterns: user.anti_patterns || []
          });
          
          await taskService.createTasks(user.telegram_id, tasks);
          await taskHandler.showTodayTasks(ctx, taskService, user, true);
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á');
        }
      } else if (params[0] === 'manual' && params[1] === 'create') {
        // –†–µ–∂–∏–º: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –≤—Ä—É—á–Ω—É—é
        try {
          const user = ctx.state.user;

          // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          let currentDay = user.level || 1;
          try {
            const stats = await userService.getUserStats(user.telegram_id);
            if (stats && stats.totalDays !== undefined) {
              currentDay = stats.totalDays || 1;
            }
          } catch (error) {
            console.error('Error getting user stats for manual mode:', error);
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
          let requiredTasks = {};
          // –≠—Ç–∞–ø 1 (–î–Ω–∏ 1-5): Easy - 30 –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–ª
          // –≠—Ç–∞–ø 2 (–î–Ω–∏ 6-10): Standard - 20 –ø—Ä–æ—Å—Ç—ã—Ö + 10 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö (–ë–ï–ó —Å–ª–æ–∂–Ω—ã—Ö!)
          // –≠—Ç–∞–ø 3 (–î–Ω–∏ 11-15+): Hard - 10 –ø—Ä–æ—Å—Ç—ã—Ö + 12 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö + 8 —Å–ª–æ–∂–Ω—ã—Ö
          if (currentDay <= 5) {
            requiredTasks = { easy: 30, standard: 0, hard: 0 };
          } else if (currentDay <= 10) {
            requiredTasks = { easy: 20, standard: 10, hard: 0 };
          } else {
            requiredTasks = { easy: 10, standard: 12, hard: 8 };
          }

          let message = `‚úèÔ∏è *–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á*\n\n`;
          if (currentDay <= 15) {
            message += `–î–µ–Ω—å ${currentDay} –∏–∑ 15\n\n`;
          } else {
            message += `–î–µ–Ω—å ${currentDay} (—Ç—ã –≤ –ø–æ—Ç–æ–∫–µ! üéâ)\n\n`;
          }
          message += `–í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å:\n`;
          message += `üíö –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏: ${requiredTasks.easy}\n`;
          message += `üíõ –°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${requiredTasks.standard}\n`;
          message += `‚ù§Ô∏è –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${requiredTasks.hard}\n`;
          message += `‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: 1\n\n`;
          message += `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:`;

          await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('üíö –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é', 'manual_add_easy')],
              [Markup.button.callback('üíõ –î–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é', 'manual_add_standard')],
              [Markup.button.callback('‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–∂–Ω—É—é', 'manual_add_hard')],
              [Markup.button.callback('‚ú® –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∏—á–µ—Å–∫—É—é', 'manual_add_magic')],
              [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ', 'manual_finish')],
              [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'show_main_menu')]
            ]).reply_markup
          });
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'use' && params[1] === 'template') {
        // –†–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω
        try {
          await templateHandler.showTemplatesMenu(ctx);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      }
      break;
      
    // –£–î–ê–õ–ï–ù–û: —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manual - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∏–∂–µ –≤ —Å—Ç—Ä–æ–∫–µ 955
    // case 'manual':
    //   break;
      
    case 'replace':
      // –ó–∞–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
      if (params[0] === 'task' && params[1]) {
        try {
          const taskId = parseInt(params[1]);
          const user = ctx.state.user;
          
          // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          const task = await taskService.getTaskById(taskId);
          if (!task) {
            await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', true);
            return;
          }
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
          const newTasks = await aiService.generateTasks(
            { [task.task_type]: 1 }, 
            {
              level: user.level || 1,
              preferences: user.preferences || [],
              antiPatterns: user.anti_patterns || []
            }
          );
          
          if (newTasks.length === 0) {
            await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', true);
            return;
          }
          
          // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
          await taskService.replaceTask(taskId, newTasks[0]);
          await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–º–µ–Ω–µ–Ω–∞!');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
          await taskHandler.showTodayTasks(ctx, taskService, user, true);
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∑–∞–¥–∞—á–∏:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∑–∞–¥–∞—á–∏', true);
        }
      }
      break;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    case 'back':
      if (params[0] === 'to' && params[1] === 'tasks') {
        try {
          const user = ctx.state.user;
          await taskHandler.showTodayTasks(ctx, taskService, user, true);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∑–∞–¥–∞—á–∞–º:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'to' && params[1] === 'menu') {
        try {
          const user = ctx.state.user;
          await startHandler.sendMainMenu(ctx, user, true, taskService);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'to' && params[1] === 'main') {
        try {
          const user = ctx.state.user;
          await startHandler.sendMainMenu(ctx, user, true, taskService);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      }
      break;

    case 'manual':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á
      if (params[0] === 'add') {
        const difficulty = params[1]; // easy, standard, hard, magic
        try {
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
          await customTaskHandler.showCreateTaskCategory(ctx, difficulty);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
        }
      } else if (params[0] === 'finish') {
        try {
          // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
          await taskHandler.showTaskList(ctx, taskService, ctx.state.user?.telegram_id);
          await ctx.answerCbQuery('–ó–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã!');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      }
      break;

    case 'edit':
      if (params[0] === 'list' && params[1] === 'menu') {
        try {
          await taskHandler.showEditListMenu(ctx);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'replace' && params[1] === 'menu') {
        try {
          const user = ctx.state.user;
          if (!ctx.session) ctx.session = {};
          ctx.session.replaceTaskPage = 0;
          await taskHandler.showReplaceTaskMenu(ctx, taskService, user.id, 0);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –∑–∞–º–µ–Ω—ã:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'add' && params[1] === 'custom') {
        try {
          await customTaskHandler.showCreateTaskDifficulty(ctx);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'delete' && params[1] === 'menu') {
        try {
          const user = ctx.state.user;
          await taskHandler.showDeleteTaskMenu(ctx, taskService, user.telegram_id);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'task' && params[1] === 'menu') {
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
          const user = ctx.state.user;
          if (!ctx.session) ctx.session = {};
          ctx.session.replaceTaskPage = 0;
          await taskHandler.showReplaceTaskMenu(ctx, taskService, user.id, 0);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'task' && params[1]) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ edit_task_${taskId} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á
        try {
          const taskId = params[1];
          await customTaskHandler.showTaskForEdit(ctx, taskService, taskId);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'bulk' && params[1] === 'menu') {
        try {
          await taskHandler.showBulkEditMenu(ctx);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'rename' && params[1] === 'menu') {
        try {
          const user = ctx.state.user;
          await taskHandler.showRenameTaskMenu(ctx, taskService, user.telegram_id);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'type' && params[1] === 'menu') {
        try {
          const user = ctx.state.user;
          await taskHandler.showChangeTypeMenu(ctx, taskService, user.telegram_id);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      }
      break;

    case 'cancel':
      if (params[0] === 'refresh') {
        try {
          const user = ctx.state.user;
          await taskHandler.showTodayTasks(ctx, taskService, user, true);
          await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      }
      break;

    case 'continue':
      if (params[0] === 'onboarding' && params[1] === 'step2') {
        try {
          console.log('‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É 2');
          await ctx.answerCbQuery('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! ‚ú®');
          await startHandler.sendOnboardingStep2(ctx);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —à–∞–≥—É 2:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      }
      break;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    case 'start':
      if (params[0] === 'onboarding') {
        try {
          console.log('üöÄ User started onboarding:', ctx.from.id);
          await ctx.answerCbQuery('–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º üöÄ');

          // –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª
          await startHandler.sendGenderSelection(ctx);
        } catch (error) {
          console.error('Error starting onboarding:', error);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞');
        }
      }
      break;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    case 'gender':
      if (params[0] === 'male' || params[0] === 'female') {
        try {
          const gender = params[0];
          await startHandler.setUserGender(ctx, userService, gender);
        } catch (error) {
          console.error('Error setting gender:', error);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–∞');
        }
      }
      break;

    // –û–°–¢–ê–í–õ–Ø–ï–ú –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò - —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ
    case 'level_old':
      if (params[0] === 'onboarding') {
        try {
          // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
          const levelText = `*–®–∞–≥ 1 –∏–∑ 3: –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å*

–í—ã–±–µ—Ä–∏, —á—Ç–æ –ª—É—á—à–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–±—è —Å–µ–π—á–∞—Å:

_üí° –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—ã–±–æ—Ä–∞, –≤—Å–µ –Ω–∞—á–∏–Ω–∞—é—Ç —Å –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ–π—Ç–∏ –≤ –ø–æ—Ç–æ–∫._`;

          const { Markup } = require('telegraf');
          const keyboard = Markup.inlineKeyboard([
            [
              Markup.button.callback('üò¥ –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä—É—é', 'level_beginner'),
              Markup.button.callback('üòê –î–µ–ª–∞—é —Ç—è–∂–µ–ª–æ', 'level_intermediate')
            ],
            [
              Markup.button.callback('üí™ –•–æ—á—É –±–æ–ª—å—à–µ', 'level_advanced')
            ]
          ]);

          await ctx.editMessageText(levelText, {
            parse_mode: 'Markdown',
            reply_markup: keyboard.reply_markup
          });
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      }
      break;

    case 'onboarding':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: —É—Ç—Ä–µ–Ω–Ω–µ–µ –∏ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è
      if (params[0] === 'morning' && ['6', '7', '8', '9', '10', '11'].includes(params[1])) {
        // –û–Ω–±–æ—Ä–¥–∏–Ω–≥: —É—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è
        try {
          const user = ctx.state.user;
          await userService.updateUser(user.telegram_id, {
            morning_hour: parseInt(params[1])
          });
          await ctx.answerCbQuery('–í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
          await startHandler.sendOnboardingStep3(ctx);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É—Ç—Ä–∞ (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥):', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏');
        }
      } else if (params[0] === 'evening' && ['19', '20', '21', '22', '23'].includes(params[1])) {
        // –û–Ω–±–æ—Ä–¥–∏–Ω–≥: –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è
        try {
          const user = ctx.state.user;
          await userService.updateUser(user.telegram_id, {
            evening_hour: parseInt(params[1])
          });
          await ctx.answerCbQuery('–í—Ä–µ–º—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
          // –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏ –≤ completeOnboarding
          const difficultyChoice = ctx.session?.difficultyChoice || null;
          await startHandler.completeOnboarding(ctx, userService, difficultyChoice);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—á–µ—Ä–∞ (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥):', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏');
        }
      }
      break;

    case 'level':
      if (['beginner', 'intermediate', 'advanced'].includes(params[0])) {
        try {
          await startHandler.setUserLevel(ctx, userService, params[0]);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è');
        }
      }
      break;

    case 'bulk':
      const user = ctx.state.user;
      if (params[0] === 'complete' && params[1] === 'all') {
        try {
          await taskHandler.showBulkConfirmation(ctx, 'bulk_complete_all', '–æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ');
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'uncomplete' && params[1] === 'all') {
        try {
          await taskHandler.showBulkConfirmation(ctx, 'bulk_uncomplete_all', '—Å–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫–∏ —Å–æ –≤—Å–µ—Ö –∑–∞–¥–∞—á');
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'delete' && params[1] === 'completed') {
        try {
          await taskHandler.showBulkConfirmation(ctx, 'bulk_delete_completed', '—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏');
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      } else if (params[0] === 'shuffle' && params[1] === 'tasks') {
        try {
          await taskHandler.showBulkConfirmation(ctx, 'bulk_shuffle_tasks', '–ø–µ—Ä–µ–º–µ—à–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á');
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
        }
      }
      break;

    case 'delete':
      if (params[0] === 'task' && params[1]) {
        try {
          const taskId = params[1];
          const user = ctx.state.user;
          await taskService.deleteTask(taskId);
          await taskHandler.updateTaskMessage(ctx, taskService, user.telegram_id);
          await ctx.answerCbQuery('üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
        }
      }
      break;

    case 'rename':
      if (params[0] === 'task' && params[1]) {
        try {
          const taskId = params[1];
          // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
          // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
          await ctx.answerCbQuery('üí° –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è');
        }
      }
      break;

    case 'change':
      if (params[0] === 'type' && params[1]) {
        try {
          const taskId = params[1];
          await taskHandler.showTypeSelectionMenu(ctx, taskId);
          await ctx.answerCbQuery();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞');
        }
      }
      break;

    case 'set':
      if (params[0] === 'type' && params[1] && params[2]) {
        try {
          const taskId = params[1];
          const newType = params[2];
          const user = ctx.state.user;

          await taskService.changeTaskType(taskId, newType);
          await taskHandler.updateTaskMessage(ctx, taskService, user.telegram_id);

          const typeNames = {
            easy: '–ü—Ä–æ—Å—Ç–∞—è üíö',
            standard: '–°—Ä–µ–¥–Ω—è—è üíõ',
            hard: '–°–ª–æ–∂–Ω–∞—è ‚ù§Ô∏è',
            magic: '–ú–∞–≥–∏—á–µ—Å–∫–∞—è ‚ú®'
          };

          await ctx.answerCbQuery(`üéØ –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${typeNames[newType]}`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏:', error.message);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞');
        }
      }
      break;

    case 'feedback':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      if (params[0] === 'bug') {
        await feedbackHandler.startBugReport(ctx);
      } else if (params[0] === 'suggestion') {
        await feedbackHandler.startSuggestion(ctx);
      }
      break;

    case 'cancel':
      if (params[0] === 'feedback') {
        await feedbackHandler.cancelFeedback(ctx);
      } else if (params[0] === 'admin' && params[1] === 'reply') {
        // –û—Ç–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
        if (ctx.session?.adminReplyTo) {
          delete ctx.session.adminReplyTo;
        }
        await ctx.editMessageText('‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
        await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
      }
      break;

    case 'admin':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏
      if (params[0] === 'feedback' && params[1] === 'reply') {
        const feedbackId = params[2];
        const userId = params[3];

        try {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
          if (!ctx.session) ctx.session = {};
          ctx.session.adminReplyTo = { feedbackId, userId };

          await ctx.answerCbQuery('üí¨ –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
          await ctx.reply('üí¨ –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', {
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_admin_reply')]
            ]).reply_markup
          });
        } catch (error) {
          console.error('Error handling admin feedback reply:', error);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        }
      }
      break;

    case 'complete':
      if (params[0] === 'day') {
        try {
          const user = ctx.state.user;
          if (!user) {
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
          }

          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
          const stats = await taskService.getDailyStats(user.telegram_id);

          const completionMessage = `
üéØ *–î–µ–Ω—å ${user.level} –∑–∞–≤–µ—Ä—à—ë–Ω!*

üìä *–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${stats.completed_tasks}/${stats.total_tasks}
üíö –ü—Ä–æ—Å—Ç—ã–µ: ${stats.easy_completed}
üíõ –°—Ä–µ–¥–Ω–∏–µ: ${stats.standard_completed}
‚ù§Ô∏è –°–ª–æ–∂–Ω—ã–µ: ${stats.hard_completed}
‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∞—è: ${stats.magic_completed ? '‚úÖ' : '‚¨ú'}

üî• Flow Score: ${stats.flow_score || 0}

${stats.completed_tasks >= 20 ? 'üèÜ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!' : stats.completed_tasks >= 10 ? 'üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' : 'üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'}

_–û—Ç–¥–æ—Ö–Ω–∏ –∏ –Ω–∞–±–∏—Ä–∞–π—Å—è —Å–∏–ª –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è!_
          `.trim();

          await ctx.editMessageText(completionMessage, {
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'show_main_menu')]
            ]).reply_markup
          });

          await ctx.answerCbQuery('‚úÖ –î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω!');
        } catch (error) {
          console.error('Error completing day:', error);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–Ω—è');
        }
      }
      break;

    default:
      console.log(`‚ùå DEFAULT CASE: action='${action}', params=${JSON.stringify(params)}`);
      await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  logger.error(`Error for ${ctx.updateType}`, err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
});

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));


// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { error } = await supabase.from('users').select('count').limit(1);
    if (error) {
      logger.error('Database connection failed:', error);
      process.exit(1);
    }
    
    logger.info('Database connected successfully');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook endpoints
    console.log('üîÑ Starting API server...');
    try {
      await startApiServer();
      console.log('‚úÖ API server started!');
      logger.info('API Server started successfully!');
    } catch (error) {
      logger.error('Failed to start API server:', error);
      console.error('‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    try {
      console.log('üöÄ Starting notification service...');
      await notificationService.initialize();
      console.log('üì¨ Notification service –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n');
    } catch (error) {
      console.error('‚ùå Failed to initialize notification service:', error);
      logger.error('Notification service initialization failed:', error);
      // –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      console.warn('‚ö†Ô∏è –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n');
    }

    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å
    const apiPort = process.env.PORT || process.env.API_PORT || 3001;
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('‚úÖ FlowBot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üì± Telegram –±–æ—Ç: @FlowList_Bot');
    console.log(`üåê API —Å–µ—Ä–≤–µ—Ä: http://0.0.0.0:${apiPort}`);
    console.log(`üì° Webhooks: http://0.0.0.0:${apiPort}/api/webhooks`);
    console.log('üí¨ –ö–æ–º–∞–Ω–¥—ã: /help, /task, /stats');
    console.log('üîÑ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (polling —Ä–µ–∂–∏–º - –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å)
    console.log('üîÑ Launching bot...');
    bot.launch();
    logger.info('FlowBot started successfully!');

    // Graceful shutdown –¥–ª—è PM2 –∏ Docker
    const gracefulShutdown = async (signal) => {
      console.log(`\n‚ö†Ô∏è  ${signal} received, starting graceful shutdown...`);

      try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        console.log('üõë Stopping bot...');
        await bot.stop(signal);

        // –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        console.log('‚è≥ Waiting for pending requests...');
        await new Promise(resolve => setTimeout(resolve, 2000));

        console.log('‚úÖ Graceful shutdown completed');
        process.exit(0);
      } catch (error) {
        console.error('‚ùå Error during shutdown:', error);
        process.exit(1);
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    process.once('SIGINT', () => gracefulShutdown('SIGINT'));
    process.once('SIGTERM', () => gracefulShutdown('SIGTERM'));

    // –î–ª—è PM2 cluster mode
    if (process.send) {
      process.send('ready');
    }

  } catch (error) {
    logger.error('Failed to start bot:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function debugUserDetailed() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–ª–µ–≥—Ä–∞–º ID
    const { data: users, error } = await supabase
      .from('users')
      .select(`
        id, 
        telegram_id, 
        username, 
        level, 
        difficulty_level,
        onboarding_completed,
        created_at,
        updated_at
      `)
      .limit(10);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return;
    }

    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    users.forEach(user => {
      console.log(`
üîç User ID: ${user.id}
üì± Telegram ID: ${user.telegram_id}
üë§ Username: ${user.username}
üìä Level: ${user.level}
üéØ Difficulty Level: ${user.difficulty_level}
‚úÖ Onboarding Completed: ${user.onboarding_completed}
üìÖ Created: ${user.created_at}
üìÖ Updated: ${user.updated_at}
      `);
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∏–∫–∏
    const { data: streaks, error: streaksError } = await supabase
      .from('streaks')
      .select('*')
      .limit(10);

    if (!streaksError && streaks.length > 0) {
      console.log('\nüî• –°—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
      streaks.forEach(streak => {
        console.log(`User ID: ${streak.user_id}, Current Streak: ${streak.current_streak}`);
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    const { data: tasks, error: tasksError } = await supabase
      .from('tasks')
      .select('user_id, date, completed')
      .eq('date', today);

    if (!tasksError && tasks.length > 0) {
      console.log(`\nüìã –ó–∞–¥–∞—á–∏ –Ω–∞ ${today}:`);
      const tasksByUser = tasks.reduce((acc, task) => {
        if (!acc[task.user_id]) acc[task.user_id] = { total: 0, completed: 0 };
        acc[task.user_id].total++;
        if (task.completed) acc[task.user_id].completed++;
        return acc;
      }, {});
      
      Object.entries(tasksByUser).forEach(([userId, stats]) => {
        console.log(`User ID: ${userId}, Completed: ${stats.completed}/${stats.total}`);
      });
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

debugUserDetailed();
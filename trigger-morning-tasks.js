// trigger-morning-tasks.js - –ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
require('dotenv').config();
const { Telegraf } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const { AIService } = require('./src/services/aiService');

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

const aiService = new AIService();

async function sendMorningTasksNow() {
  console.log('üåÖ –ó–∞–ø—É—Å–∫–∞–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏...\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: users } = await supabase
    .from('users')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(1);
  
  if (!users || users.length === 0) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ');
    return;
  }
  
  const user = users[0];
  console.log('üë§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è:', user.username || user.first_name);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–¥–∞—á
  const level = user.level || 1;
  let taskConfig = {};

  // –≠—Ç–∞–ø 1 (–î–Ω–∏ 1-5): Easy - 30 –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–ª
  // –≠—Ç–∞–ø 2 (–î–Ω–∏ 6-10): Standard - 20 –ø—Ä–æ—Å—Ç—ã—Ö + 10 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö (–ë–ï–ó —Å–ª–æ–∂–Ω—ã—Ö!)
  // –≠—Ç–∞–ø 3 (–î–Ω–∏ 11-15): Hard - 10 –ø—Ä–æ—Å—Ç—ã—Ö + 12 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö + 8 —Å–ª–æ–∂–Ω—ã—Ö
  // –î–Ω–∏ 16+: –ü–æ—Ç–æ–∫ - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 3 (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é)
  if (level <= 5) {
    taskConfig = { easy: 30, standard: 0, hard: 0 };
  } else if (level <= 10) {
    taskConfig = { easy: 20, standard: 10, hard: 0 };
  } else {
    // –î–ª—è –¥–Ω–µ–π 11 –∏ –¥–∞–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    taskConfig = { easy: 10, standard: 12, hard: 8 };
  }
  
  console.log('üìä –î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–º—ã:', level);
  console.log('üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', taskConfig);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
  const tasks = await aiService.generateTasks({
    level: level,
    preferences: user.preferences || [],
    antiPatterns: user.anti_patterns || [],
    ...taskConfig
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É
  const today = new Date().toISOString().split('T')[0];

  for (let i = 0; i < tasks.length; i++) {
    await supabase.from('tasks').insert({
      user_id: user.id,
      date: today,
      task_text: tasks[i].text,
      task_type: tasks[i].type,
      position: i + 1,
      ai_generated: true
    });
  }

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
  const nextLevel = (user.level || 1) + 1;
  await supabase
    .from('users')
    .update({ level: nextLevel })
    .eq('id', user.id);

  console.log(`üìà User level increased: ${level} ‚Üí ${nextLevel}`);

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = 'üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –¢–≤–æ–π Flow List –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n';
  if (level <= 15) {
    message += `üìÖ –î–µ–Ω—å ${level} –∏–∑ 15\n\n`;
  } else {
    message += `üìÖ –î–µ–Ω—å ${level} (—Ç—ã –≤ –ø–æ—Ç–æ–∫–µ! üéâ)\n\n`;
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø–∞–º
  const easyTasks = tasks.filter(t => t.type === 'easy');
  const standardTasks = tasks.filter(t => t.type === 'standard');
  const hardTasks = tasks.filter(t => t.type === 'hard');
  const magicTasks = tasks.filter(t => t.type === 'magic');
  
  if (easyTasks.length > 0) {
    message += 'üü¢ –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏:\n';
    easyTasks.slice(0, 10).forEach((task, i) => {
      message += `${i + 1}. ${task.text}\n`;
    });
    if (easyTasks.length > 10) {
      message += `... –∏ –µ—â–µ ${easyTasks.length - 10} –∑–∞–¥–∞—á\n`;
    }
    message += '\n';
  }
  
  if (standardTasks.length > 0) {
    message += 'üü° –°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n';
    standardTasks.forEach((task, i) => {
      message += `${i + 1}. ${task.text}\n`;
    });
    message += '\n';
  }
  
  if (hardTasks.length > 0) {
    message += 'üî¥ –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n';
    hardTasks.forEach((task, i) => {
      message += `${i + 1}. ${task.text}\n`;
    });
    message += '\n';
  }
  
  if (magicTasks.length > 0) {
    message += '‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞:\n';
    message += `${magicTasks[0].text}\n\n`;
  }
  
  message += 'üí° –ù–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏!\n';
  message += '–ò—Å–ø–æ–ª—å–∑—É–π /task –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏';
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  await bot.telegram.sendMessage(user.telegram_id, message);
  
  console.log('‚úÖ –ó–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
  console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
sendMorningTasksNow()
  .then(() => {
    console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ!');
    process.exit(0);
  })
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
    process.exit(1);
  });

#!/usr/bin/env node

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function applyMigration() {
  console.log('üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é...\n');

  try {
    // SQL –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
    const alterTable = `
      ALTER TABLE tasks 
      ADD COLUMN IF NOT EXISTS is_custom BOOLEAN DEFAULT FALSE,
      ADD COLUMN IF NOT EXISTS custom_task_id INTEGER REFERENCES custom_tasks(id) ON DELETE SET NULL;
    `;

    const createIndex1 = `CREATE INDEX IF NOT EXISTS idx_tasks_is_custom ON tasks(is_custom);`;
    const createIndex2 = `CREATE INDEX IF NOT EXISTS idx_tasks_custom_task_id ON tasks(custom_task_id);`;

    console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ PostgreSQL REST API –Ω–∞–ø—Ä—è–º—É—é
    const response1 = await fetch(`${process.env.SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
      method: 'POST',
      headers: {
        'apikey': process.env.SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${process.env.SUPABASE_SERVICE_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ sql: alterTable })
    });

    if (!response1.ok) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ API, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º...');
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
      const { error: error1 } = await supabase
        .from('_supabase_admin_schemas')
        .select('*')
        .limit(0);

      console.log('üí° –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ Supabase Dashboard:');
      console.log('\n=== SQL –ö–û–î –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===');
      console.log(alterTable);
      console.log(createIndex1);
      console.log(createIndex2);
      console.log('==============================\n');
      
      console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://supabase.com/dashboard');
      console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç');
      console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor');
      console.log('4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∫–æ–¥ –≤—ã—à–µ');
      console.log('5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n');
      
      return;
    }

    console.log('‚úÖ –°—Ç–æ–ª–±—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

    console.log('üìù –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...');
    
    const response2 = await fetch(`${process.env.SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
      method: 'POST',
      headers: {
        'apikey': process.env.SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${process.env.SUPABASE_SERVICE_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ sql: createIndex1 })
    });

    const response3 = await fetch(`${process.env.SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
      method: 'POST',
      headers: {
        'apikey': process.env.SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${process.env.SUPABASE_SERVICE_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ sql: createIndex2 })
    });

    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã...');
    const { data, error } = await supabase
      .from('tasks')
      .select('telegram_id, is_custom, custom_task_id')
      .limit(1);

    if (error) {
      throw error;
    }

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
    console.log('üéâ –ù–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã is_custom –∏ custom_task_id –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É tasks');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.log('\nüí° –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ Supabase Dashboard');
    console.log('SQL –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
    console.log(`
ALTER TABLE tasks 
ADD COLUMN IF NOT EXISTS is_custom BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS custom_task_id INTEGER REFERENCES custom_tasks(id) ON DELETE SET NULL;

CREATE INDEX IF NOT EXISTS idx_tasks_is_custom ON tasks(is_custom);
CREATE INDEX IF NOT EXISTS idx_tasks_custom_task_id ON tasks(custom_task_id);
    `);
  }
}

applyMigration();
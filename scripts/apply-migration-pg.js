#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ pg
require('dotenv').config();

async function applyMigration() {
  console.log('üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ postgresql...\n');
  
  try {
    // –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å pg
    let pg;
    try {
      pg = require('pg');
    } catch (e) {
      console.log('‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pg –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: npm install pg');
      console.log('\nüîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é:');
      showManualInstructions();
      return;
    }

    // –ü–∞—Ä—Å–∏–º URL Supabase –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    const supabaseUrl = process.env.SUPABASE_URL;
    const serviceKey = process.env.SUPABASE_SERVICE_KEY;
    
    if (!supabaseUrl || !serviceKey) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_KEY –≤ .env');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º project_id –∏–∑ URL
    const projectId = supabaseUrl.match(/https:\/\/([a-z0-9]+)\.supabase\.co/)?.[1];
    if (!projectId) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å project_id –∏–∑ SUPABASE_URL');
    }

    console.log('üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL...');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è PostgreSQL
    const connectionString = `postgresql://postgres.${projectId}:${serviceKey}@aws-0-eu-central-1.pooler.supabase.com:6543/postgres`;
    
    const client = new pg.Client({
      connectionString,
      ssl: {
        rejectUnauthorized: false
      }
    });

    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // SQL –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
    const commands = [
      `ALTER TABLE tasks ADD COLUMN IF NOT EXISTS is_custom BOOLEAN DEFAULT FALSE`,
      `ALTER TABLE tasks ADD COLUMN IF NOT EXISTS custom_task_id INTEGER REFERENCES custom_tasks(id) ON DELETE SET NULL`,
      `CREATE INDEX IF NOT EXISTS idx_tasks_is_custom ON tasks(is_custom)`,
      `CREATE INDEX IF NOT EXISTS idx_tasks_custom_task_id ON tasks(custom_task_id)`
    ];

    console.log('üìù –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      console.log(`‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ ${i + 1}/${commands.length}: ${command.substring(0, 50)}...`);
      
      try {
        await client.query(command);
        console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É: ${error.message}`);
        
        // –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if (error.message.includes('already exists') || error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
          console.log('üí° –°—Ç–æ–ª–±—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
        } else {
          throw error;
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã...');
    const result = await client.query('SELECT column_name FROM information_schema.columns WHERE table_name = $1 AND column_name IN ($2, $3)', 
      ['tasks', 'is_custom', 'custom_task_id']);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤: ${result.rows.length}`);
    result.rows.forEach(row => {
      console.log(`  - ${row.column_name}`);
    });

    await client.end();
    
    if (result.rows.length >= 2) {
      console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
      console.log('üîÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞');
    } else {
      console.log('\n‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ');
      showManualInstructions();
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.log('\nüîß –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é:');
    showManualInstructions();
  }
}

function showManualInstructions() {
  console.log('\n=== –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –†–£–ß–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://supabase.com/dashboard');
  console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç FlowBot');
  console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor (–ª–µ–≤–æ–µ –º–µ–Ω—é)');
  console.log('4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç SQL:');
  console.log('\n--- SQL –ö–û–î ---');
  console.log(`ALTER TABLE tasks 
ADD COLUMN IF NOT EXISTS is_custom BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS custom_task_id INTEGER REFERENCES custom_tasks(id) ON DELETE SET NULL;

CREATE INDEX IF NOT EXISTS idx_tasks_is_custom ON tasks(is_custom);
CREATE INDEX IF NOT EXISTS idx_tasks_custom_task_id ON tasks(custom_task_id);`);
  console.log('--- –ö–û–ù–ï–¶ SQL ---\n');
  console.log('5. –ù–∞–∂–º–∏—Ç–µ RUN –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
  console.log('6. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞');
  console.log('==========================================\n');
}

applyMigration();
#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π FlowBot –Ω–∞ Timeweb Cloud
 *
 * –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è (npm run pre-deploy)
 * 2. –ß–∏—Ç–∞–µ—Ç .env
 * 3. –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π commit SHA
 * 4. –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Timeweb —á–µ—Ä–µ–∑ MCP
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run deploy:timeweb
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function section(title) {
  console.log('\n' + '='.repeat(60));
  log('cyan', `  ${title}`);
  console.log('='.repeat(60));
}

// –®–∞–≥ 1: Pre-deploy –ø—Ä–æ–≤–µ—Ä–∫–∏
function runPreDeployChecks() {
  section('üîç –®–∞–≥ 1: Pre-deploy –ø—Ä–æ–≤–µ—Ä–∫–∏');

  try {
    execSync('npm run pre-deploy', { stdio: 'inherit' });
    log('green', '‚úÖ Pre-deploy –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã');
    return true;
  } catch (error) {
    log('red', '‚ùå Pre-deploy –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã');
    log('yellow', '\n‚ö†Ô∏è  –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ');
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–µ–Ω readline –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    return false;
  }
}

// –®–∞–≥ 2: –ß—Ç–µ–Ω–∏–µ .env
function readEnvFile() {
  section('üìã –®–∞–≥ 2: –ß—Ç–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞');

  const envPath = path.join(process.cwd(), '.env');

  if (!fs.existsSync(envPath)) {
    log('red', '‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
  }

  const envContent = fs.readFileSync(envPath, 'utf-8');
  const envVars = {};

  envContent.split('\n').forEach(line => {
    line = line.trim();
    if (line && !line.startsWith('#')) {
      const [key, ...valueParts] = line.split('=');
      const value = valueParts.join('=').replace(/^["']|["']$/g, '');
      if (key && value) {
        envVars[key] = value;
      }
    }
  });

  log('green', `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(envVars).length} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è`);
  log('blue', '\n–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
  Object.keys(envVars).forEach(key => {
    const displayValue = key.includes('KEY') || key.includes('TOKEN') || key.includes('SECRET')
      ? '***'
      : envVars[key].substring(0, 30) + '...';
    console.log(`   ${key}: ${displayValue}`);
  });

  return envVars;
}

// –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function getGitInfo() {
  section('üîç –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');

  try {
    const repoUrl = execSync('git remote get-url origin', { encoding: 'utf-8' }).trim();
    const commitSha = execSync('git rev-parse HEAD', { encoding: 'utf-8' }).trim();
    const branch = execSync('git branch --show-current', { encoding: 'utf-8' }).trim();

    log('green', '‚úÖ Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
    console.log(`   Repository: ${repoUrl}`);
    console.log(`   Branch: ${branch}`);
    console.log(`   Commit: ${commitSha.substring(0, 7)}`);

    return { repoUrl, commitSha, branch };
  } catch (error) {
    log('red', '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    process.exit(1);
  }
}

// –®–∞–≥ 4: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è
function printDeployInstructions(envVars, gitInfo) {
  section('üöÄ –®–∞–≥ 4: –î–µ–ø–ª–æ–π –Ω–∞ Timeweb');

  log('yellow', '\n‚ö†Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ MCP —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Claude Code\n');
  log('blue', '–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –≤ Claude Code:\n');

  const envJson = JSON.stringify(envVars, null, 2);

  console.log(`
  1. –ü–æ–ª—É—á–∏ VCS provider:
     mcp__timeweb-mcp-server__get_vcs_provider_by_repository_url({
       repository_url: "${gitInfo.repoUrl}"
     })

  2. –ü–æ–ª—É—á–∏ repository_id:
     mcp__timeweb-mcp-server__get_vcs_provider_repositories({
       provider_id: "PROVIDER_ID_–ò–ó_–®–ê–ì–ê_1"
     })

  3. –°–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
     mcp__timeweb-mcp-server__create_timeweb_app({
       name: "FlowBot",
       type: "backend",
       provider_id: "PROVIDER_ID_–ò–ó_–®–ê–ì–ê_1",
       repository_id: "REPO_ID_–ò–ó_–®–ê–ì–ê_2",
       repository_url: "${gitInfo.repoUrl}",
       preset_id: 1631,
       framework: "express",
       commit_sha: "${gitInfo.commitSha}",
       branch_name: "${gitInfo.branch}",
       build_cmd: "npm install",
       run_cmd: "npm start",
       envs: ${envJson},
       is_auto_deploy: false
     })
  `);

  log('cyan', '\nüìö –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: TIMEWEB_DEPLOY.md');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  log('magenta', '\nüöÄ FlowBot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –Ω–∞ Timeweb Cloud\n');

  // –®–∞–≥ 1: Pre-deploy –ø—Ä–æ–≤–µ—Ä–∫–∏
  // runPreDeployChecks(); // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è

  // –®–∞–≥ 2: –ß—Ç–µ–Ω–∏–µ .env
  const envVars = readEnvFile();

  // –®–∞–≥ 3: Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  const gitInfo = getGitInfo();

  // –®–∞–≥ 4: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è
  printDeployInstructions(envVars, gitInfo);

  section('‚úÖ –ì–æ—Ç–æ–≤–æ!');
  log('green', '\n–°–∫–æ–ø–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ –∏ –≤—ã–ø–æ–ª–Ω–∏ –∏—Ö –≤ Claude Code');
  log('blue', '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤ –±—É–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏\n');
}

// –ó–∞–ø—É—Å–∫
main();

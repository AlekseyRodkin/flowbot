#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/trigger-notifications.js                    - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞
 *   node scripts/trigger-notifications.js --hour 11          - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Å–∞
 *   node scripts/trigger-notifications.js --user 272559647   - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */

require('dotenv').config();
const { Telegraf } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const moment = require('moment-timezone');
const { TaskService } = require('../src/services/taskService');
const { AIService } = require('../src/services/aiService');
const { NotificationService } = require('../src/services/notificationService');

// Parse arguments
const args = process.argv.slice(2);
const hourArg = args.find(arg => arg.startsWith('--hour'));
const userArg = args.find(arg => arg.startsWith('--user'));

const targetHour = hourArg ? parseInt(hourArg.split('=')[1]) : moment().tz('Europe/Moscow').hour();
const targetUserId = userArg ? userArg.split('=')[1] : null;

console.log('\nüß™ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('üß™ MANUAL NOTIFICATION TRIGGER');
console.log('üß™ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
console.log(`‚è∞ Target hour: ${targetHour}:00`);
if (targetUserId) {
  console.log(`üë§ Target user: ${targetUserId}`);
} else {
  console.log(`üë• Target: All users with morning_hour or evening_hour = ${targetHour}`);
}
console.log('');

// Initialize services
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const taskService = new TaskService(supabase);
const aiService = new AIService();
const notificationService = new NotificationService(bot, supabase, taskService, aiService);

async function triggerNotifications() {
  try {
    if (targetUserId) {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      console.log(`üì§ Fetching user ${targetUserId}...`);

      const { data: user, error } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', targetUserId)
        .single();

      if (error || !user) {
        console.error('‚ùå User not found:', error);
        process.exit(1);
      }

      console.log(`‚úÖ Found user: ${user.first_name || user.username}`);
      console.log(`   Morning hour: ${user.morning_hour}`);
      console.log(`   Evening hour: ${user.evening_hour}`);
      console.log('');

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
      if (user.morning_hour === targetHour) {
        console.log('üåÖ Sending morning tasks...\n');
        await notificationService.sendTasksToUser(user);
        console.log('\n‚úÖ Morning tasks sent successfully!');
      } else if (user.evening_hour === targetHour) {
        console.log('üåô Sending evening reflection...\n');
        await notificationService.sendReflectionToUser(user);
        console.log('\n‚úÖ Evening reflection sent successfully!');
      } else {
        console.log(`‚ö†Ô∏è  User's schedule doesn't match target hour ${targetHour}`);
        console.log(`   Use --hour=${user.morning_hour} for morning tasks`);
        console.log(`   Use --hour=${user.evening_hour} for evening reflection`);
      }
    } else {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞ —ç—Ç–æ—Ç —á–∞—Å
      console.log('üåÖ Checking for morning tasks...\n');
      await notificationService.sendMorningTasks();

      console.log('\nüåô Checking for evening reflections...\n');
      await notificationService.sendEveningReflection();

      console.log('\n‚úÖ All notifications processed!');
    }

    console.log('\nüß™ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üß™ DONE');
    console.log('üß™ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Error:', error);
    process.exit(1);
  }
}

// –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º sendMorningTasks –∏ sendEveningReflection
// —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å targetHour –≤–º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
const originalSendMorningTasks = notificationService.sendMorningTasks.bind(notificationService);
const originalSendEveningReflection = notificationService.sendEveningReflection.bind(notificationService);

notificationService.sendMorningTasks = async function() {
  const currentHour = targetHour;

  console.log(`üåÖ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);
  console.log(`üåÖ Checking MORNING tasks for ${currentHour}:00`);
  console.log(`üåÖ Query: morning_hour = ${currentHour} AND onboarding_completed = true`);

  const { data: users, error } = await this.supabase
    .from('users')
    .select('*')
    .eq('morning_hour', currentHour)
    .eq('onboarding_completed', true);

  if (error) {
    console.error('‚ùå Error fetching users for morning tasks:', error);
    return;
  }

  console.log(`‚úÖ Found ${users?.length || 0} user(s) for morning tasks at ${currentHour}:00`);

  if (users && users.length > 0) {
    users.forEach(u => {
      console.log(`   - ${u.first_name || u.username} (ID: ${u.telegram_id}, morning_hour: ${u.morning_hour})`);
    });
  }

  for (const user of users || []) {
    try {
      console.log(`üì§ Sending tasks to user ${user.telegram_id} (${user.first_name || user.username})`);
      await this.sendTasksToUser(user);
    } catch (error) {
      console.error(`‚ùå Error sending tasks to user ${user.telegram_id}:`, error);
    }
  }
};

notificationService.sendEveningReflection = async function() {
  const currentHour = targetHour;

  console.log(`üåô ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);
  console.log(`üåô Checking EVENING reflection for ${currentHour}:00`);
  console.log(`üåô Query: evening_hour = ${currentHour} AND onboarding_completed = true`);

  const { data: users, error } = await this.supabase
    .from('users')
    .select('*')
    .eq('evening_hour', currentHour)
    .eq('onboarding_completed', true);

  if (error) {
    console.error('‚ùå Error fetching users for evening reflection:', error);
    return;
  }

  console.log(`‚úÖ Found ${users?.length || 0} user(s) for evening reflection at ${currentHour}:00`);

  if (users && users.length > 0) {
    users.forEach(u => {
      console.log(`   - ${u.first_name || u.username} (ID: ${u.telegram_id}, evening_hour: ${u.evening_hour})`);
    });
  }

  for (const user of users || []) {
    try {
      console.log(`üì§ Sending reflection to user ${user.telegram_id} (${user.first_name || user.username})`);
      await this.sendReflectionToUser(user);
    } catch (error) {
      console.error(`‚ùå Error sending reflection to user ${user.telegram_id}:`, error);
    }
  }
};

triggerNotifications();

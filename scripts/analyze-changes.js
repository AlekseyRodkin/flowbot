#!/usr/bin/env node

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç git diff –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
 * - –ù–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
 * - Async —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ await
 * - –ù–æ–≤—ã–µ process.env –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ .env
 * - –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª–æ–≥–∏–∫–µ cron/–≤—Ä–µ–º–µ–Ω–∏
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function section(title) {
  console.log('\n' + '='.repeat(60));
  log('cyan', `  ${title}`);
  console.log('='.repeat(60));
}

// –ü–æ–ª—É—á–∏—Ç—å git diff
function getGitDiff() {
  try {
    return execSync('git diff HEAD', { encoding: 'utf-8' });
  } catch (error) {
    log('red', '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è git diff');
    return '';
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function getChangedFiles() {
  try {
    const output = execSync('git diff --name-only HEAD', { encoding: 'utf-8' });
    return output.trim().split('\n').filter(f => f);
  } catch (error) {
    return [];
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
function checkNewImports(diff) {
  section('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤');

  const requirePattern = /^\+.*require\(['"](.+)['"]\)/gm;
  const newImports = [];
  let match;

  while ((match = requirePattern.exec(diff)) !== null) {
    newImports.push(match[1]);
  }

  if (newImports.length === 0) {
    log('green', '‚úÖ –ù–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return true;
  }

  log('yellow', `‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: ${newImports.length}`);
  newImports.forEach(imp => {
    console.log(`   - require('${imp}')`);
  });

  log('blue', '\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
  console.log('   - –í—Å–µ –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä?');
  console.log('   - –û–±–Ω–æ–≤–ª—ë–Ω –ª–∏ bot/index.js –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤?');

  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–æ–≤—ã–µ process.env
function checkNewEnvVars(diff) {
  section('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');

  const envPattern = /^\+.*process\.env\.(\w+)/gm;
  const newEnvVars = new Set();
  let match;

  while ((match = envPattern.exec(diff)) !== null) {
    newEnvVars.add(match[1]);
  }

  if (newEnvVars.size === 0) {
    log('green', '‚úÖ –ù–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return true;
  }

  // –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
  const envPath = path.join(process.cwd(), '.env');
  let envContent = '';
  try {
    envContent = fs.readFileSync(envPath, 'utf-8');
  } catch (error) {
    log('red', '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env —Ñ–∞–π–ª');
    return false;
  }

  const missingVars = [];
  newEnvVars.forEach(varName => {
    if (!envContent.includes(`${varName}=`)) {
      missingVars.push(varName);
    }
  });

  if (missingVars.length > 0) {
    log('red', `‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ .env:`);
    missingVars.forEach(v => console.log(`   - ${v}`));
    return false;
  }

  log('yellow', `‚ö†Ô∏è  –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—É–∂–µ –≤ .env):`);
  newEnvVars.forEach(v => console.log(`   - ${v}`));

  log('blue', '\nüí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ:');
  console.log('   - –ü–µ—Ä–µ–¥–∞—Ç—å —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Timeweb —á–µ—Ä–µ–∑ envs –æ–±—ä–µ–∫—Ç!');

  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: Async/await
function checkAsyncAwait(diff) {
  section('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ async/await');

  // –ò—â–µ–º async —Ñ—É–Ω–∫—Ü–∏–∏
  const asyncPattern = /^\+.*async\s+(\w+)\s*\(/gm;
  const asyncFunctions = [];
  let match;

  while ((match = asyncPattern.exec(diff)) !== null) {
    asyncFunctions.push(match[1]);
  }

  if (asyncFunctions.length === 0) {
    log('green', '‚úÖ –ù–æ–≤—ã—Ö async —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return true;
  }

  log('yellow', `‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö async —Ñ—É–Ω–∫—Ü–∏–π: ${asyncFunctions.length}`);
  asyncFunctions.forEach(fn => {
    console.log(`   - async ${fn}()`);
  });

  log('blue', '\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
  console.log('   - –í—Å–µ –ª–∏ –≤—ã–∑–æ–≤—ã —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç await?');
  console.log('   - –ï—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (try/catch –∏–ª–∏ .catch())?');

  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö
function checkConstructors(diff) {
  section('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤');

  const constructorPattern = /^\+\s*constructor\s*\(([^)]*)\)/gm;
  const constructors = [];
  let match;

  while ((match = constructorPattern.exec(diff)) !== null) {
    const params = match[1].split(',').map(p => p.trim()).filter(p => p);
    constructors.push(params);
  }

  if (constructors.length === 0) {
    log('green', '‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return true;
  }

  log('yellow', `‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö: ${constructors.length}`);
  constructors.forEach((params, i) => {
    console.log(`   ${i + 1}. constructor(${params.join(', ')})`);
  });

  log('blue', '\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
  console.log('   - –í—Å–µ –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞?');
  console.log('   - –û–±–Ω–æ–≤–ª—ë–Ω –ª–∏ bot/index.js?');

  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
function checkTimeRelatedChanges(diff) {
  section('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º');

  const timeKeywords = [
    'cron',
    'schedule',
    'moment',
    'Date',
    'timezone',
    'morning',
    'evening',
    'level',
  ];

  const foundKeywords = [];
  timeKeywords.forEach(keyword => {
    const pattern = new RegExp(`^\\+.*${keyword}`, 'gmi');
    if (pattern.test(diff)) {
      foundKeywords.push(keyword);
    }
  });

  if (foundKeywords.length === 0) {
    log('green', '‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return true;
  }

  log('yellow', `‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º:`);
  foundKeywords.forEach(kw => console.log(`   - ${kw}`));

  log('blue', '\nüí° –ö–†–ò–¢–ò–ß–ù–û - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
  console.log('   - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —É—Ç—Ä–æ ‚Üí –¥–µ–Ω—å ‚Üí –≤–µ—á–µ—Ä ‚Üí —É—Ç—Ä–æ');
  console.log('   - –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ level –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç?');
  console.log('   - –ù–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ –ª–æ–≥–∏–∫–∞?');

  return false;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  log('magenta', '\nüîç –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –Ω–∞ Timeweb\n');

  const diff = getGitDiff();
  const changedFiles = getChangedFiles();

  if (!diff || changedFiles.length === 0) {
    log('green', '‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    log('blue', '\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã!');
    return;
  }

  log('blue', `üìù –ò–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${changedFiles.length}`);
  changedFiles.forEach(f => console.log(`   - ${f}`));

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  const checks = [
    checkNewImports(diff),
    checkNewEnvVars(diff),
    checkAsyncAwait(diff),
    checkConstructors(diff),
    checkTimeRelatedChanges(diff),
  ];

  // –ò—Ç–æ–≥–∏
  section('üìä –ò—Ç–æ–≥–∏');

  const warnings = checks.filter(c => !c).length;

  if (warnings === 0) {
    log('green', '‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    log('green', '‚úÖ –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é');
  } else {
    log('yellow', `‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings}`);
    log('blue', '\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤—ã—à–µ');
    console.log('   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ');
    console.log('   3. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ .claude/pre-deploy-checklist.md');
    console.log('   4. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Timeweb');
  }

  console.log('\n' + '='.repeat(60));
  log('cyan', '  üìö –ü–æ–ª–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç: .claude/pre-deploy-checklist.md');
  log('cyan', '  üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–µ–ø–ª–æ—è: TIMEWEB_DEPLOY.md');
  console.log('='.repeat(60) + '\n');
}

// –ó–∞–ø—É—Å–∫
main();

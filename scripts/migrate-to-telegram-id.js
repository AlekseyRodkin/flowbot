#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ID –≤ –ø—Ä–æ–µ–∫—Ç–µ FlowBot
// –¶–µ–ª—å: –ø–µ—Ä–µ–π—Ç–∏ —Å –¥–≤–æ–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã id/telegram_id –Ω–∞ –µ–¥–∏–Ω—É—é telegram_id

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function runMigration() {
  console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ID...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    const { error: connectionError } = await supabase
      .from('users')
      .select('count')
      .limit(1);

    if (connectionError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${connectionError.message}`);
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ\n');

    // –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é
    const migrationPath = path.join(__dirname, '../database/migrations/005_fix_id_final.sql');
    
    if (!fs.existsSync(migrationPath)) {
      throw new Error(`–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${migrationPath}`);
    }

    console.log('üìÑ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏...');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const sqlCommands = migrationSQL
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

    console.log(`üîß –ù–∞–π–¥–µ–Ω–æ ${sqlCommands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
    let completedCommands = 0;
    for (const command of sqlCommands) {
      try {
        if (command.includes('COMMENT ON')) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
          continue;
        }

        console.log(`‚öôÔ∏è  –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${completedCommands + 1}/${sqlCommands.length}...`);
        const { error } = await supabase.rpc('execute_sql', { sql: command });
        
        if (error) {
          // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ RPC, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ SQL Editor
          console.log(`‚ùå –û—à–∏–±–∫–∞ RPC: ${error.message}`);
          console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ SQL Editor –≤ Supabase Dashboard');
          throw error;
        }
        
        completedCommands++;
        console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${completedCommands} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${completedCommands + 1}:`, error.message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        console.log(`üîç –ü—Ä–æ–±–ª–µ–º–Ω–∞—è SQL –∫–æ–º–∞–Ω–¥–∞:\n${command}\n`);
        
        // –î–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä—É—á–Ω–æ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
        console.log('üîß –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard');
        console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor');
        console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ database/migrations/004_fix_id_structure.sql');
        console.log('4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏\n');
        
        process.exit(1);
      }
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ID –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:');
    console.log('  ‚úÖ telegram_id —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö');
    console.log('  ‚úÖ –£–±—Ä–∞–Ω–∞ –ø—É—Ç–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É id –∏ telegram_id');
    console.log('  ‚úÖ –í—Å–µ —Å–≤—è–∑–∏ —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ telegram_id');
    console.log('  ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã');
    
    console.log('\nüîÑ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('  1. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    console.log('  2. –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞: npm run dev');
    console.log('  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
    await validateMigration();

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    console.log('\nüîß –†–µ—à–µ–Ω–∏–µ:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .env —Ñ–∞–π–ª–∞');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î');
    console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Supabase SQL Editor\n');
    process.exit(1);
  }
}

async function validateMigration() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('telegram_id, first_name')
      .limit(1);

    if (usersError) {
      throw new Error(`–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${usersError.message}`);
    }

    const { data: tasks, error: tasksError } = await supabase
      .from('tasks')
      .select('telegram_id, task_text')
      .limit(1);

    if (tasksError) {
      throw new Error(`–¢–∞–±–ª–∏—Ü–∞ tasks –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${tasksError.message}`);
    }

    console.log('‚úÖ –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users?.length || 0}`);
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks?.length || 0}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  runMigration();
}

module.exports = { runMigration };
#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ is_custom –∏ custom_task_id

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function runMigration() {
  console.log('\nüöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è custom tasks...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    const { error: connectionError } = await supabase
      .from('tasks')
      .select('count')
      .limit(1);

    if (connectionError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${connectionError.message}`);
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ\n');

    // –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é
    const migrationPath = path.join(__dirname, '../database/migrations/007_add_is_custom_to_tasks.sql');
    
    if (!fs.existsSync(migrationPath)) {
      throw new Error(`–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${migrationPath}`);
    }

    console.log('üìÑ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏...');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const sqlCommands = migrationSQL
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

    console.log(`üîß –ù–∞–π–¥–µ–Ω–æ ${sqlCommands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL
    let completedCommands = 0;
    for (const command of sqlCommands) {
      try {
        console.log(`‚öôÔ∏è  –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${completedCommands + 1}/${sqlCommands.length}...`);
        console.log(`SQL: ${command.substring(0, 100)}...`);
        
        const { error } = await supabase.rpc('exec', { sql: command });
        
        if (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
          console.log('üí° –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');
          
          // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
          const { error: altError } = await supabase
            .from('_temp')
            .select('*', { head: true });
          
          // –ï—Å–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
          console.log('üîß –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é:');
          console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard');
          console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor');
          console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π SQL:');
          console.log('\n' + command + '\n');
          
          // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        } else {
          completedCommands++;
          console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${completedCommands} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${completedCommands + 1}:`, error.message);
        console.log(`üîç SQL –∫–æ–º–∞–Ω–¥–∞:\n${command}\n`);
      }
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:');
    console.log('  ‚úÖ –°—Ç–æ–ª–±–µ—Ü is_custom –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á');
    console.log('  ‚úÖ –°—Ç–æ–ª–±–µ—Ü custom_task_id –¥–ª—è —Å–≤—è–∑–∏ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –∑–∞–¥–∞—á');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
    await validateMigration();

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .env —Ñ–∞–π–ª–∞');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î');
    console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Supabase SQL Editor');
    console.log('\nSQL –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
    console.log('ALTER TABLE tasks ADD COLUMN IF NOT EXISTS is_custom BOOLEAN DEFAULT FALSE;');
    console.log('ALTER TABLE tasks ADD COLUMN IF NOT EXISTS custom_task_id INTEGER REFERENCES custom_tasks(id) ON DELETE SET NULL;');
    process.exit(1);
  }
}

async function validateMigration() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã
    const { data: taskSample, error: tasksError } = await supabase
      .from('tasks')
      .select('telegram_id, task_text, is_custom, custom_task_id')
      .limit(1);

    if (tasksError) {
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º: ${tasksError.message}`);
    }

    console.log('‚úÖ –ù–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    console.log('üìä –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
    console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∞—Å—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  runMigration();
}

module.exports = { runMigration };
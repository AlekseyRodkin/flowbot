#!/usr/bin/env node

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const moment = require('moment-timezone');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function testNotifications() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n');

  const currentHour = moment().tz('Europe/Moscow').hour();
  console.log(`‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${moment().tz('Europe/Moscow').format('HH:mm')}`);
  console.log(`üìä –¢–µ–∫—É—â–∏–π —á–∞—Å: ${currentHour}\n`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å morning_hour = —Ç–µ–∫—É—â–∏–π —á–∞—Å
  const { data: morningUsers, error: morningError } = await supabase
    .from('users')
    .select('telegram_id, first_name, username, morning_hour, onboarding_completed')
    .eq('morning_hour', currentHour)
    .eq('onboarding_completed', true);

  if (morningError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á:', morningError);
  } else {
    console.log(`üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á (hour=${currentHour}): ${morningUsers.length}`);
    morningUsers.forEach(user => {
      console.log(`  - ${user.first_name || user.username} (${user.telegram_id}): morning_hour=${user.morning_hour}`);
    });
    console.log();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å evening_hour = —Ç–µ–∫—É—â–∏–π —á–∞—Å
  const { data: eveningUsers, error: eveningError } = await supabase
    .from('users')
    .select('telegram_id, first_name, username, evening_hour, onboarding_completed')
    .eq('evening_hour', currentHour)
    .eq('onboarding_completed', true);

  if (eveningError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:', eveningError);
  } else {
    console.log(`üåô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (hour=${currentHour}): ${eveningUsers.length}`);
    eveningUsers.forEach(user => {
      console.log(`  - ${user.first_name || user.username} (${user.telegram_id}): evening_hour=${user.evening_hour}`);
    });
    console.log();
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const { data: allUsers, error: allError } = await supabase
    .from('users')
    .select('telegram_id, first_name, username, morning_hour, evening_hour, onboarding_completed')
    .eq('onboarding_completed', true);

  if (allError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', allError);
  } else {
    console.log(`üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
    allUsers.forEach(user => {
      console.log(`  - ${user.first_name || user.username} (${user.telegram_id}): morning=${user.morning_hour}:00, evening=${user.evening_hour}:00`);
    });
  }
}

testNotifications().then(() => {
  console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  process.exit(1);
});
